/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * Oasis Nexus API V1
 * An API for accessing indexed data from the Oasis Network.

<!-- Acts as a separator after search in sidebar -->
# Endpoints

 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import getStatusMutator from '../largePages';
import getConsensusTotalSupplyRawMutator from '../largePages';
import getConsensusCirculatingSupplyRawMutator from '../largePages';
import getConsensusBlocksMutator from '../largePages';
import getConsensusBlocksHeightMutator from '../largePages';
import getConsensusTransactionsMutator from '../largePages';
import getConsensusTransactionsTxHashMutator from '../largePages';
import getConsensusEventsMutator from '../largePages';
import getConsensusRoothashMessagesMutator from '../largePages';
import getConsensusEntitiesMutator from '../largePages';
import getConsensusEntitiesAddressMutator from '../largePages';
import getConsensusEntitiesAddressNodesMutator from '../largePages';
import getConsensusEntitiesAddressNodesNodeIdMutator from '../largePages';
import getConsensusValidatorsMutator from '../largePages';
import getConsensusValidatorsAddressMutator from '../largePages';
import getConsensusValidatorsAddressHistoryMutator from '../largePages';
import getConsensusAccountsMutator from '../largePages';
import getConsensusAccountsAddressMutator from '../largePages';
import getConsensusAccountsAddressDelegationsMutator from '../largePages';
import getConsensusAccountsAddressDelegationsToMutator from '../largePages';
import getConsensusAccountsAddressDebondingDelegationsMutator from '../largePages';
import getConsensusAccountsAddressDebondingDelegationsToMutator from '../largePages';
import getConsensusEpochsMutator from '../largePages';
import getConsensusEpochsEpochMutator from '../largePages';
import getConsensusProposalsMutator from '../largePages';
import getConsensusProposalsProposalIdMutator from '../largePages';
import getConsensusProposalsProposalIdVotesMutator from '../largePages';
import getRuntimeBlocksMutator from '../largePages';
import getRuntimeTransactionsMutator from '../largePages';
import getRuntimeTransactionsTxHashMutator from '../largePages';
import getRuntimeEventsMutator from '../largePages';
import getRuntimeEvmTokensMutator from '../largePages';
import getRuntimeEvmTokensAddressMutator from '../largePages';
import getRuntimeEvmTokensAddressHoldersMutator from '../largePages';
import getRuntimeEvmTokensAddressNftsMutator from '../largePages';
import getRuntimeEvmTokensAddressNftsIdMutator from '../largePages';
import getRuntimeAccountsAddressMutator from '../largePages';
import getRuntimeAccountsAddressNftsMutator from '../largePages';
import getRuntimeStatusMutator from '../largePages';
import getRuntimeRoflAppsMutator from '../largePages';
import getRuntimeRoflAppsIdMutator from '../largePages';
import getRuntimeRoflAppsIdTransactionsMutator from '../largePages';
import getRuntimeRoflAppsIdInstanceTransactionsMutator from '../largePages';
import getRuntimeRoflAppsIdInstancesMutator from '../largePages';
import getRuntimeRoflAppsIdInstancesRakMutator from '../largePages';
import getRuntimeRoflAppsIdInstancesRakTransactionsMutator from '../largePages';
import getRuntimeRoflmarketProvidersMutator from '../largePages';
import getRuntimeRoflmarketProvidersAddressMutator from '../largePages';
import getRuntimeRoflmarketProvidersAddressOffersMutator from '../largePages';
import getRuntimeRoflmarketProvidersAddressOffersIdMutator from '../largePages';
import getRuntimeRoflmarketProvidersAddressInstancesIdMutator from '../largePages';
import getRuntimeRoflmarketInstancesMutator from '../largePages';
import getLayerStatsTxVolumeMutator from '../largePages';
import getLayerStatsActiveAccountsMutator from '../largePages';
export type GetLayerStatsActiveAccountsParams = {
/**
 * The maximum numbers of items to return.

 */
limit?: number;
/**
 * The number of items to skip before starting to collect the result set.

 */
offset?: number;
/**
 * The size of the step between returned statistic windows, in seconds.
The backend supports a limited number of step sizes: 300 (5 minutes) and
86400 (1 day). Requests with other values may be rejected.

 */
window_step_seconds?: number;
};

export type GetLayerStatsTxVolumeParams = {
/**
 * The maximum numbers of items to return.

 */
limit?: number;
/**
 * The number of items to skip before starting to collect the result set.

 */
offset?: number;
/**
 * The size of windows into which the statistic is grouped, in seconds.
The backend supports a limited number of window sizes: 300 (5 minutes) and
86400 (1 day). Requests with other values may be rejected.

 */
window_size_seconds?: number;
/**
 * The size of the step between returned statistic windows, in seconds.
The backend supports a limited number of step sizes: 300 (5 minutes) and
86400 (1 day). Requests with other values may be rejected.

 */
window_step_seconds?: number;
};

export type GetRuntimeRoflmarketInstancesParams = {
/**
 * The maximum numbers of items to return.

 */
limit?: number;
/**
 * The number of items to skip before starting to collect the result set.

 */
offset?: number;
/**
 * A filter on the provider of the ROFL market instance.
 */
provider?: StakingAddress;
/**
 * A filter on the admin of the ROFL market instance.
 */
admin?: EthOrOasisAddress;
/**
 * A filter on the deployed app ID of the ROFL market instance.
 */
deployed_app_id?: string;
};

export type GetRuntimeRoflmarketProvidersAddressOffersParams = {
/**
 * The maximum numbers of items to return.

 */
limit?: number;
/**
 * The number of items to skip before starting to collect the result set.

 */
offset?: number;
};

export type GetRuntimeRoflmarketProvidersParams = {
/**
 * The maximum numbers of items to return.

 */
limit?: number;
/**
 * The number of items to skip before starting to collect the result set.

 */
offset?: number;
};

export type GetRuntimeRoflAppsIdInstancesRakTransactionsParams = {
/**
 * The maximum numbers of items to return.

 */
limit?: number;
/**
 * The number of items to skip before starting to collect the result set.

 */
offset?: number;
/**
 * A filter on the runtime transaction method.

In addition to the existing method names, the following special values are supported:
  - 'native_transfers': Returns transactions "likely to be native transfers".
    - These include accounts.Transfer transactions and evm.Calls with an empty 'body' field.

  - 'evm.Call_no_native': Returns EVM calls that are "not likely to be native transfers".

 */
method?: string;
};

export type GetRuntimeRoflAppsIdInstancesParams = {
/**
 * The maximum numbers of items to return.

 */
limit?: number;
/**
 * The number of items to skip before starting to collect the result set.

 */
offset?: number;
};

export type GetRuntimeRoflAppsIdInstanceTransactionsParams = {
/**
 * The maximum numbers of items to return.

 */
limit?: number;
/**
 * The number of items to skip before starting to collect the result set.

 */
offset?: number;
/**
 * A filter on the runtime transaction method.

In addition to the existing method names, the following special values are supported:
  - 'native_transfers': Returns transactions "likely to be native transfers".
    - These include accounts.Transfer transactions and evm.Calls with an empty 'body' field.

  - 'evm.Call_no_native': Returns EVM calls that are "not likely to be native transfers".

 */
method?: string;
};

export type GetRuntimeRoflAppsIdTransactionsParams = {
/**
 * The maximum numbers of items to return.

 */
limit?: number;
/**
 * The number of items to skip before starting to collect the result set.

 */
offset?: number;
/**
 * A filter on the runtime transaction method.

In addition to the existing method names, the following special values are supported:
  - 'native_transfers': Returns transactions "likely to be native transfers".
    - These include accounts.Transfer transactions and evm.Calls with an empty 'body' field.

  - 'evm.Call_no_native': Returns EVM calls that are "not likely to be native transfers".

 */
method?: string;
};

export type GetRuntimeRoflAppsSortBy = typeof GetRuntimeRoflAppsSortBy[keyof typeof GetRuntimeRoflAppsSortBy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetRuntimeRoflAppsSortBy = {
  created_at: 'created_at',
  created_at_desc: 'created_at_desc',
} as const;

export type GetRuntimeRoflAppsParams = {
/**
 * The maximum numbers of items to return.

 */
limit?: number;
/**
 * The number of items to skip before starting to collect the result set.

 */
offset?: number;
/**
 * A filter on the admin of the ROFL app.
 */
admin?: EthOrOasisAddress;
/**
 * A filter on the name of the ROFL app. If multiple names are provided, the ROFL App must match all of them.
 */
name?: string[];
/**
 * The field to sort the ROFL apps by.
If unset, the ROFL apps will be sorted by activity (num_active_instances, num_transactions) in descending order.
To sort by creation time, set this to `created_at` (or `created_at_desc`).

 */
sort_by?: GetRuntimeRoflAppsSortBy;
};

export type GetRuntimeAccountsAddressNftsParams = {
/**
 * The maximum numbers of items to return.

 */
limit?: number;
/**
 * The number of items to skip before starting to collect the result set.

 */
offset?: number;
/**
 * Only return NFT instances from the token contract at the given staking address.
 */
token_address?: EthOrOasisAddress;
};

export type GetRuntimeEvmTokensAddressNftsParams = {
/**
 * The maximum numbers of items to return.

 */
limit?: number;
/**
 * The number of items to skip before starting to collect the result set.

 */
offset?: number;
};

export type GetRuntimeEvmTokensAddressHoldersParams = {
/**
 * The maximum numbers of items to return.

 */
limit?: number;
/**
 * The number of items to skip before starting to collect the result set.

 */
offset?: number;
};

export type GetRuntimeEvmTokensSortBy = typeof GetRuntimeEvmTokensSortBy[keyof typeof GetRuntimeEvmTokensSortBy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetRuntimeEvmTokensSortBy = {
  total_holders: 'total_holders',
  market_cap: 'market_cap',
} as const;

export type GetRuntimeEvmTokensParams = {
/**
 * The maximum numbers of items to return.

 */
limit?: number;
/**
 * The number of items to skip before starting to collect the result set.

 */
offset?: number;
/**
 * A filter on the name, the name or symbol must contain this value as a substring. If multiple names are provided, the token must match all of them.
 */
name?: string[];
/**
 * The field to sort the tokens by.
If unset, the tokens will be sorted by number of holders.

 */
sort_by?: GetRuntimeEvmTokensSortBy;
/**
 * The type of tokens to return.

 */
type?: EvmTokenType;
};

export type GetRuntimeEventsParams = {
/**
 * The maximum numbers of items to return.

 */
limit?: number;
/**
 * The number of items to skip before starting to collect the result set.

 */
offset?: number;
/**
 * A filter on block round.
 */
block?: number;
/**
 * A filter on transaction index. The returned events all need to originate
from a transaction that appeared in `tx_index`-th position in the block.
It is invalid to specify this filter without also specifying a `block`.
Specifying `tx_index` and `round` is an alternative to specifying `tx_hash`;
either works to fetch events from a specific transaction.

 */
tx_index?: number;
/**
 * A filter on the hash of the transaction that originated the events.
Specifying `tx_index` and `round` is an alternative to specifying `tx_hash`;
either works to fetch events from a specific transaction.
This can be an Ethereum transaction hash; the query will compare against
both a transaction's regular tx_hash and eth_tx_hash (if it exists).

 */
tx_hash?: string;
/**
 * A filter on the event type.
 */
type?: RuntimeEventType;
/**
 * A filter on related accounts. Every returned event will refer to
this account. For example, for a `accounts.Transfer` event, this will be
the sender or the recipient of tokens.

 */
rel?: EthOrOasisAddress;
/**
 * A filter on the evm log signatures.
Note: The filter will only match on parsed (verified) EVM events.

 */
evm_log_signature?: string;
/**
 * A filter on a smart contract. Every returned event will have been
emitted by the contract at this address.

 */
contract_address?: EthOrOasisAddress;
/**
 * A filter on NFT events. Every returned event will be specifically
about this NFT instance ID. You must specify the contract_address
filter with this filter.
Currently this only supports ERC-721 Transfer events.
This may expand to support other event types in the future.
If you want only ERC-721 Transfer events, specify
evm_log_signature=ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef
to avoid inadvertently getting other event types if they are
supported later.
Using an evm_log_signature filter with this set to any other value
will match no events.

 */
nft_id?: string;
};

export type GetRuntimeTransactionsParams = {
/**
 * The maximum numbers of items to return.

 */
limit?: number;
/**
 * The number of items to skip before starting to collect the result set.

 */
offset?: number;
/**
 * A filter on block round.
 */
block?: number;
/**
 * A filter on minimum transaction time, inclusive.
 */
after?: string;
/**
 * A filter on maximum transaction time, exclusive.
 */
before?: string;
/**
 * A filter on related accounts. Every returned transaction will refer to
this account in a way. For example, for an `accounts.Transfer` tx, this will be
the sender or the recipient of tokens.
Nexus detects related accounts inside EVM transactions and events on a
best-effort basis. For example, it inspects ERC20 methods inside `evm.Call` txs.

 */
rel?: EthOrOasisAddress;
/**
 * A filter on the runtime transaction method.

In addition to the existing method names, the following special values are supported:
  - 'native_transfers': Returns transactions "likely to be native transfers".
    - These include accounts.Transfer transactions and evm.Calls with an empty 'body' field.

  - 'evm.Call_no_native': Returns EVM calls that are "not likely to be native transfers".

 */
method?: string;
};

export type GetRuntimeBlocksParams = {
/**
 * The maximum numbers of items to return.

 */
limit?: number;
/**
 * The number of items to skip before starting to collect the result set.

 */
offset?: number;
/**
 * A filter on minimum block height, inclusive.
 */
from?: number;
/**
 * A filter on maximum block height, inclusive.
 */
to?: number;
/**
 * A filter on minimum block time, inclusive.
 */
after?: string;
/**
 * A filter on maximum block time, exclusive.
 */
before?: string;
/**
 * A filter on the block hash.
 */
hash?: string;
};

export type GetConsensusProposalsProposalIdVotesParams = {
/**
 * The maximum numbers of items to return.

 */
limit?: number;
/**
 * The number of items to skip before starting to collect the result set.

 */
offset?: number;
};

export type GetConsensusProposalsParams = {
/**
 * The maximum numbers of items to return.

 */
limit?: number;
/**
 * The number of items to skip before starting to collect the result set.

 */
offset?: number;
/**
 * Filter on the submitter of the proposal.
 */
submitter?: StakingAddress;
/**
 * Filter on the state of the proposal.
 */
state?: ProposalState;
};

export type GetConsensusEpochsParams = {
/**
 * The maximum numbers of items to return.

 */
limit?: number;
/**
 * The number of items to skip before starting to collect the result set.

 */
offset?: number;
};

export type GetConsensusAccountsAddressDebondingDelegationsToParams = {
/**
 * The maximum numbers of items to return.

 */
limit?: number;
/**
 * The number of items to skip before starting to collect the result set.

 */
offset?: number;
};

export type GetConsensusAccountsAddressDebondingDelegationsParams = {
/**
 * The maximum numbers of items to return.

 */
limit?: number;
/**
 * The number of items to skip before starting to collect the result set.

 */
offset?: number;
};

export type GetConsensusAccountsAddressDelegationsToParams = {
/**
 * The maximum numbers of items to return.

 */
limit?: number;
/**
 * The number of items to skip before starting to collect the result set.

 */
offset?: number;
};

export type GetConsensusAccountsAddressDelegationsParams = {
/**
 * The maximum numbers of items to return.

 */
limit?: number;
/**
 * The number of items to skip before starting to collect the result set.

 */
offset?: number;
};

export type GetConsensusAccountsParams = {
/**
 * The maximum numbers of items to return.

 */
limit?: number;
/**
 * The number of items to skip before starting to collect the result set.

 */
offset?: number;
};

export type GetConsensusValidatorsAddressHistoryParams = {
/**
 * The maximum numbers of items to return.

 */
limit?: number;
/**
 * The number of items to skip before starting to collect the result set.

 */
offset?: number;
/**
 * A filter on minimum epoch number, inclusive.
 */
from?: number;
/**
 * A filter on maximum epoch number, inclusive.
 */
to?: number;
};

export type GetConsensusValidatorsParams = {
/**
 * The maximum numbers of items to return.

 */
limit?: number;
/**
 * The number of items to skip before starting to collect the result set.

 */
offset?: number;
/**
 * A filter on the validator name. Every returned validator will have
a name that is a superstring of the input param.

 */
name?: string;
};

export type GetConsensusEntitiesAddressNodesParams = {
/**
 * The maximum numbers of items to return.

 */
limit?: number;
/**
 * The number of items to skip before starting to collect the result set.

 */
offset?: number;
};

export type GetConsensusEntitiesParams = {
/**
 * The maximum numbers of items to return.

 */
limit?: number;
/**
 * The number of items to skip before starting to collect the result set.

 */
offset?: number;
};

export type GetConsensusRoothashMessagesParams = {
/**
 * The maximum numbers of items to return.

 */
limit?: number;
/**
 * The number of items to skip before starting to collect the result set.

 */
offset?: number;
runtime: Runtime;
round?: number;
type?: RoothashMessageType;
rel?: StakingAddress;
};

export type GetConsensusEventsParams = {
/**
 * The maximum numbers of items to return.

 */
limit?: number;
/**
 * The number of items to skip before starting to collect the result set.

 */
offset?: number;
/**
 * A filter on block height.
 */
block?: number;
/**
 * A filter on transaction index. The returned events all need to originate
from a transaction that appeared in `tx_index`-th position in the block.
It is invalid to specify this filter without also specifying a `block`.
Specifying `tx_index` and `block` is an alternative to specifying `tx_hash`;
either works to fetch events from a specific transaction.

 */
tx_index?: number;
/**
 * A filter on the hash of the transaction that originated the events.
Specifying `tx_index` and `block` is an alternative to specifying `tx_hash`;
either works to fetch events from a specific transaction.

 */
tx_hash?: string;
/**
 * A filter on related accounts. Every returned event will refer to
this account. For example, for a `Transfer` event, this will be the
the sender or the recipient of tokens.

 */
rel?: StakingAddress;
/**
 * A filter on the event type.
 */
type?: ConsensusEventType;
};

export type GetConsensusTransactionsParams = {
/**
 * The maximum numbers of items to return.

 */
limit?: number;
/**
 * The number of items to skip before starting to collect the result set.

 */
offset?: number;
/**
 * A filter on block height.
 */
block?: number;
/**
 * A filter on transaction method.
 */
method?: ConsensusTxMethod;
/**
 * A filter on transaction sender.
 */
sender?: StakingAddress;
/**
 * A filter on related accounts.
 */
rel?: string;
/**
 * A filter on minimum transaction time, inclusive.
 */
after?: string;
/**
 * A filter on maximum transaction time, exclusive.
 */
before?: string;
};

export type GetConsensusBlocksParams = {
/**
 * The maximum numbers of items to return.

 */
limit?: number;
/**
 * The number of items to skip before starting to collect the result set.

 */
offset?: number;
/**
 * A filter on minimum block height, inclusive.
 */
from?: number;
/**
 * A filter on maximum block height, inclusive.
 */
to?: number;
/**
 * A filter on minimum block time, inclusive.
 */
after?: string;
/**
 * A filter on maximum block time, exclusive.
 */
before?: string;
/**
 * A filter on the block hash.
 */
hash?: string;
/**
 * A filter on the proposer of the block.
 */
proposed_by?: StakingAddress;
};

/**
 * An empty response indicating that the requested resource was not found.
 */
export type NotFoundErrorResponse = unknown;

export type HumanReadableErrorResponse = {
  /** An error message. */
  msg: string;
};

export type RoflMarketInstanceListAllOf = {
  instances: RoflMarketInstance[];
};

export type RoflMarketInstanceList = List & RoflMarketInstanceListAllOf;

/**
 * The commands for this instance.
 */
export type RoflMarketInstanceCmdsItem = { [key: string]: any };

/**
 * The payment information for this instance.
 */
export type RoflMarketInstancePayment = { [key: string]: any };

/**
 * The deployment configuration for this instance.
 */
export type RoflMarketInstanceDeployment = { [key: string]: any };

/**
 * The resources allocated to this instance.
 */
export type RoflMarketInstanceResources = { [key: string]: any };

/**
 * Arbitrary metadata key-value pairs assigned by the provider.
 */
export type RoflMarketInstanceMetadata = { [key: string]: any };

export interface RoflMarketInstance {
  /** Unique instance identifier. */
  id: string;
  /** The address of the ROFL market provider that created this instance. */
  provider: string;
  /** The identifier of the offer that this instance belongs to. */
  offer_id: string;
  /** The status of the instance. */
  status: number;
  /** The address of the creator of the instance. */
  creator: string;
  /** The address of the administrator of the instance. */
  admin: string;
  /** the optional identifier of the node where the instance has been provisioned. */
  node_id?: string;
  /** Arbitrary metadata key-value pairs assigned by the provider. */
  metadata: RoflMarketInstanceMetadata;
  /** The resources allocated to this instance. */
  resources: RoflMarketInstanceResources;
  /** The deployment configuration for this instance. */
  deployment: RoflMarketInstanceDeployment;
  /** The date and time when the instance was created. */
  created_at: string;
  /** The date and time when the instance was last updated. */
  updated_at: string;
  /** The date and time from which the instance has been paid for and not yet claimed by the provider. */
  paid_from: string;
  /** The date and time until which the instance has been paid for. */
  paid_until: string;
  /** The payment information for this instance. */
  payment: RoflMarketInstancePayment;
  /** The payment address for this instance. */
  payment_address: string;
  /** The method-specific refund information. */
  refund_data: string;
  /** The next command ID for this instance. */
  cmd_next_id: string;
  /** The number of commands for this instance. */
  cmd_count: number;
  cmds?: RoflMarketInstanceCmdsItem[];
  /** Whether the instance has been removed. */
  removed: boolean;
}

export type RoflMarketOfferListAllOf = {
  offers: RoflMarketOffer[];
};

export type RoflMarketOfferList = List & RoflMarketOfferListAllOf;

/**
 * Arbitrary metadata key-value pairs assigned by the provider.
 */
export type RoflMarketOfferMetadata = { [key: string]: any };

/**
 * The payment configuration for this offer.
 */
export type RoflMarketOfferPayment = { [key: string]: any };

/**
 * The offered resources by this offer.
 */
export type RoflMarketOfferResources = { [key: string]: any };

export interface RoflMarketOffer {
  /** Unique offer identifier. */
  id: string;
  /** The address of the ROFL market provider that created this offer. */
  provider: string;
  /** The offered resources by this offer. */
  resources: RoflMarketOfferResources;
  /** The payment configuration for this offer. */
  payment: RoflMarketOfferPayment;
  /** Amount of available instances for this offer. */
  capacity: number;
  /** Arbitrary metadata key-value pairs assigned by the provider. */
  metadata: RoflMarketOfferMetadata;
  /** Whether the offer has been removed. */
  removed: boolean;
}

export type RoflMarketProviderList = List & RoflMarketProviderListAllOf;

/**
 * Arbitrary metadata key-value pairs, assigned by the provider.
 */
export type RoflMarketProviderMetadata = { [key: string]: any };

/**
 * The payment address configuration for this provider.
 */
export type RoflMarketProviderPaymentAddress = { [key: string]: any };

export interface RoflMarketProvider {
  /** The address of the ROFL market provider. */
  address: string;
  /** The nodes that are part of the ROFL market provider. */
  nodes: string[];
  /** The authorized scheduler ROFL app ID for this provider. */
  scheduler: string;
  /** The payment address configuration for this provider. */
  payment_address: RoflMarketProviderPaymentAddress;
  /** Arbitrary metadata key-value pairs, assigned by the provider. */
  metadata: RoflMarketProviderMetadata;
  /** The amount staked for provider registration. */
  stake: TextBigInt;
  /** The next offer ID for this provider. */
  offers_next_id: string;
  /** The number of offers. */
  offers_count: number;
  /** The next instance ID for this provider. */
  instances_next_id: string;
  /** The number of instances. */
  instances_count: number;
  /** The date and time when the provider was created. */
  created_at: string;
  /** The date and time when the provider was last updated. */
  updated_at: string;
  /** Whether the provider has been removed. */
  removed: boolean;
}

export type RoflMarketProviderListAllOf = {
  providers: RoflMarketProvider[];
};

/**
 * Arbitrary metadata key-value pairs, assigned by the application.
 */
export type RoflInstanceMetadata = { [key: string]: any };

export interface RoflInstance {
  /** The runtime attestation public key (Ed25519). */
  rak: string;
  /** The runtime encryption public key (x25519). */
  rek: string;
  /** The identifier of the endorsing node. */
  endorsing_node_id: string;
  /** The optional identifier of the endorsing entity. */
  endorsing_entity_id?: string;
  /** The epoch at which the instance expires. */
  expiration_epoch: number;
  /** Arbitrary metadata key-value pairs, assigned by the application. */
  metadata?: RoflInstanceMetadata;
  /** The extra endorsed public keys. Extra keys can be Ed25519, Secp256k1, or Sr25519. And
are stored as json with included type information.
 */
  extra_keys: string[];
}

export type RoflAppInstanceListAllOf = {
  instances: RoflInstance[];
};

export type RoflAppInstanceList = List & RoflAppInstanceListAllOf;

/**
 * Arbitrary SEK-encrypted key-value pairs.
 */
export type RoflAppSecrets = { [key: string]: any };

/**
 * Arbitrary key-value pairs.
 */
export type RoflAppMetadata = { [key: string]: any };

/**
 * The application authentication policy.
 */
export type RoflAppPolicy = { [key: string]: any };

export interface RoflApp {
  /** The identifier of the ROFL application. */
  id: string;
  /** The application administrator address. */
  admin: string;
  /** The Ethereum address of the application administrator (only provided if known). */
  admin_eth?: string;
  /** The amount of stake in escrow by the administrator. */
  stake: TextBigInt;
  /** The application authentication policy. */
  policy: RoflAppPolicy;
  /** The secrets encryption public key. */
  sek: string;
  /** Arbitrary key-value pairs. */
  metadata: RoflAppMetadata;
  /** Arbitrary SEK-encrypted key-value pairs. */
  secrets: RoflAppSecrets;
  /** Whether the application has been removed. */
  removed: boolean;
  /** The date and time when the application was created. */
  date_created: string;
  /** The date and time when the application was last active. */
  last_activity: string;
  /** The most recent transaction associated with this ROFL app.
This field is only present when querying a single ROFL app.
 */
  last_activity_tx?: RuntimeTransaction;
  /** The number of currently active instances of the application. */
  num_active_instances: number;
  /** Registered application instances. Only active instances are returned.
Use the `{runtime}/rofl_apps/{id}/instances` endpoint to retrieve all instances.
 */
  active_instances: RoflInstance[];
}

/**
 * A list of ROFL apps.

 */
export type RoflAppListAllOf = {
  rofl_apps: RoflApp[];
};

export type RoflAppList = List & RoflAppListAllOf;

export interface ActiveAccounts {
  /** The date for the end of the daily active accounts measurement window. */
  window_end: string;
  /** The number of active accounts for the 24hour window ending at window_end. */
  active_accounts: number;
}

/**
 * A list of daily unique active account windows.

 */
export interface ActiveAccountsList {
  window_size_seconds: number;
  /** The list of daily unique active account windows. */
  windows: ActiveAccounts[];
}

export interface TxVolume {
  /** The end timestamp for this daily transaction volume measurement. */
  window_end: string;
  /** The transaction volume for this window. */
  tx_volume: number;
}

/**
 * A list of daily transaction volumes.

 */
export interface TxVolumeList {
  window_size_seconds: number;
  /** The list of daily transaction volumes. */
  windows: TxVolume[];
}

export interface AccountStats {
  /**
   * The total amount of native tokens sent, in base units.
DEPRECATED: This field might be inaccurate. Nexus is currently not able to track
certain actions which subtract/add tokens.

   * @deprecated
   */
  total_sent?: TextBigInt;
  /**
   * The total amount of native tokens received, in base units.
DEPRECATED: This field might be inaccurate. Nexus is currently not able to track
certain actions which subtract/add tokens.

   * @deprecated
   */
  total_received?: TextBigInt;
  /** The total number of transactions this account was involved with. */
  num_txns: number;
}

/**
 * A list of NFT instances.
 */
export type EvmNftListAllOf = {
  /** A list of L2 EVM NFT (ERC-721, ...) instances. */
  evm_nfts: EvmNft[];
};

export type EvmNftList = List & EvmNftListAllOf;

export interface EvmRefToken {
  /** The heuristically determined interface that the token contract implements.
A less specialized variant of the token might be detected; for example, an
ERC-1363 token might be labeled as ERC-20 here. If the type cannot be
detected or is not supported, this field will be null/absent.
 */
  type: EvmTokenType;
  /** Name of the token, as provided by token contract's `name()` method. */
  name?: string;
  /** Symbol of the token, as provided by token contract's `symbol()` method. */
  symbol?: string;
  /** The number of least significant digits in base units that should be displayed as
decimals when displaying tokens. `tokens = base_units / (10**decimals)`.
Affects display only. Often equals 18, to match ETH.
 */
  decimals?: number;
}

export interface EvmTokenSwap {
  /** The Oasis address of the swap pair contract.
 */
  pair_address: string;
  /** The Ethereum-compatible address of the swap pair contract.
 */
  pair_address_eth?: string;
  /** The Oasis address of the swap factory contract.
 */
  factory_address?: string;
  /** The Ethereum-compatible address of the swap factory contract.
 */
  factory_address_eth?: string;
  /** The Oasis address of the first token in this swap.
 */
  token0_address?: string;
  /** The Ethereum-compatible address of the first token in this swap
 */
  token0_address_eth?: string;
  /** The Oasis address of the second token in this swap.
 */
  token1_address?: string;
  /** The Ethereum-compatible address of the second token in this swap.
 */
  token1_address_eth?: string;
  /** The round when this swap pair was created.
 */
  create_round?: number;
  /** The swap's liquidity pool of the first token, in that token's base units.
 */
  reserve0?: TextBigInt;
  /** The swap's liquidity pool of the second token, in that token's base units.
 */
  reserve1?: TextBigInt;
  /** The round when this swap pair last updated its reserves.
 */
  last_sync_round?: number;
}

export interface EvmToken {
  /** The Oasis address of this token's contract. */
  contract_addr: string;
  /** The Ethereum address of this token's contract. */
  eth_contract_addr: string;
  /** Name of the token, as provided by token contract's `name()` method. */
  name?: string;
  /** Symbol of the token, as provided by token contract's `symbol()` method. */
  symbol?: string;
  /** The number of least significant digits in base units that should be displayed as
decimals when displaying tokens. `tokens = base_units / (10**decimals)`.
Affects display only. Often equals 18, to match ETH.
 */
  decimals?: number;
  /** The heuristically determined interface that the token contract implements.
A less specialized variant of the token might be detected; for example, an
ERC-1363 token might be labeled as ERC-20 here. If the type cannot be
detected or is not supported, this field will be null/absent.
 */
  type: EvmTokenType;
  /** The total number of base units available. */
  total_supply?: TextBigInt;
  /** The total number of transfers of this token.
 */
  num_transfers?: number;
  /** The number of addresses that have a nonzero balance of this token.
 */
  num_holders: number;
  /** Information about a swap contract between this token and a
reference token. The relative price and relative total value of
this token are estimated based on this swap contract.
 */
  ref_swap?: EvmTokenSwap;
  /** Information about the reference token. The relative price and
relative total value are expressed in this reference token's base
unit.
 */
  ref_token?: EvmRefToken;
  /** The relative price and relative total value are expressed in this
reference token's base unit.
 */
  relative_token_address?: string;
  /** The relative price of one base unit of this token is this many of
the relative token's base unit.
 */
  relative_price?: number;
  /** The relative price of this token multiplied by this token's total
supply, in the relative token's base unit.
 */
  relative_total_value?: number;
  /**
   * Whether the contract has been successfully verified by Sourcify.
Additional information on verified contracts is available via
the `/{runtime}/accounts/{address}` endpoint.
DEPRECATED: This field will be removed in the future in favor of verification_level

   * @deprecated
   */
  is_verified: boolean;
  verification_level?: VerificationLevel;
}

export interface EvmNft {
  token: EvmToken;
  /** The instance ID of this NFT within the collection represented by `token`. */
  id: TextBigInt;
  /** The Oasis address of this NFT instance's owner. */
  owner?: Address;
  /** The Ethereum address of this NFT instance's owner. */
  owner_eth?: string;
  /** The total number of transfers of this NFT instance.
 */
  num_transfers?: number;
  metadata_uri?: string;
  metadata_accessed?: string;
  /** A metadata document for this NFT instance.
Currently only ERC-721 is supported, where the document is an Asset Metadata from the ERC721 Metadata JSON Schema.
 */
  metadata?: unknown;
  /** Identifies the asset which this NFT represents */
  name?: string;
  /** Describes the asset which this NFT represents */
  description?: string;
  /** A URI pointing to a resource with mime type image/* representing
the asset which this NFT represents. (Additional
non-descriptive text from ERC-721 omitted.)
 */
  image?: string;
}

/**
 * A list of tokens in a runtime.
 */
export type EvmTokenListAllOf = {
  /** A list of L2 EVM tokens (ERC-20, ERC-721, ...). */
  evm_tokens: EvmToken[];
};

export type EvmTokenList = List & EvmTokenListAllOf;

/**
 * The type of a EVM token.

 */
export type EvmTokenType = typeof EvmTokenType[keyof typeof EvmTokenType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EvmTokenType = {
  ERC20: 'ERC20',
  ERC721: 'ERC721',
} as const;

export interface RuntimeStatus {
  /** The number of compute nodes that are registered and can run the runtime. */
  active_nodes: number;
  /** The height of the most recent indexed block (also sometimes referred to as "round") for this runtime. Query a synced Oasis node for the latest block produced. */
  latest_block: number;
  /** The RFC 3339 formatted consensus time of when the latest indexed block for this runtime was produced. */
  latest_block_time: string;
  /** The number of milliseconds since Nexus processed the latest block. */
  latest_update_age_ms: number;
}

export interface RuntimeAccount {
  /** The staking address for this account. */
  address: string;
  address_preimage?: AddressPreimage;
  /** The balance(s) of this account in this runtime. Most runtimes use only one denomination, and thus
produce only one balance here. These balances do not include "layer (n+1) tokens", i.e. tokens
managed by smart contracts deployed in this runtime. For example, in EVM-compatible runtimes,
this does not include ERC-20 tokens
 */
  balances: RuntimeSdkBalance[];
  /** Data on the EVM smart contract associated with this account address. Only present for accounts
that represent a smart contract on EVM.
 */
  evm_contract?: RuntimeEvmContract;
  /** The balances of this account in each runtime, as managed by EVM smart contracts (notably, ERC-20).
NOTE: This field is limited to 1000 entries. If you need more, please let us know in a GitHub issue.
 */
  evm_balances: RuntimeEvmBalance[];
  stats: AccountStats;
}

export interface RuntimeTransactionSigner {
  /** The Oasis address of the transaction signer.
 */
  address: Address;
  /** The Ethereum address of this transaction signer.
 */
  address_eth?: string;
  /** The transaction signer nonce. */
  nonce: number;
}

export interface RuntimeTransactionEncryptionEnvelope {
  /** The format of the encrypted evm transaction envelope. */
  format: CallFormat;
  /** The base64-encoded public key used to encrypt the transaction. */
  public_key?: string;
  /** The base64-encoded nonce used to encrypt the transaction data. */
  data_nonce?: string;
  /** The base64-encoded encrypted transaction data. */
  data?: string;
  /** The base64-encoded nonce used to encrypt the transaction results. */
  result_nonce?: string;
  /** The base64-encoded encrypted result data. */
  result?: string;
}

/**
 * The method call body. May be null if the transaction was malformed.
 */
export type RuntimeTransactionBody = { [key: string]: any };

/**
 * A runtime transaction.

 */
export interface RuntimeTransaction {
  /** The block round at which this transaction was executed. */
  round: number;
  /** The 0-based index of this transaction in the block. */
  index: number;
  /** The second-granular consensus time when this tx's block was proposed. */
  timestamp: string;
  /** The Oasis cryptographic hash of this transaction's encoding. */
  hash: string;
  /** The Ethereum cryptographic hash of this transaction's encoding.
Absent for non-Ethereum-format transactions.
 */
  eth_hash?: string;
  /** The signers of this transaction. */
  signers: RuntimeTransactionSigner[];
  /**
   * The Oasis address of this transaction's 0th signer.
Unlike Ethereum, Oasis natively supports multiple-signature transactions.
However, the great majority of transactions only have a single signer in practice.
DEPRECATED: This field will be removed in the future in favor of the signers field.

   * @deprecated
   */
  sender_0: Address;
  /**
   * The Ethereum address of this transaction's 0th signer.
DEPRECATED: This field will be removed in the future in favor of the signers field.

   * @deprecated
   */
  sender_0_eth?: string;
  /**
   * The nonce used with this transaction's 0th signer, to prevent replay.
DEPRECATED: This field will be removed in the future in favor of the signers field.

   * @deprecated
   */
  nonce_0: number;
  /** The fee that this transaction's sender committed to pay to execute
it (total ParaTime base units, as a string).
 */
  fee: string;
  /** The denomination of the fee.
 */
  fee_symbol: string;
  /** The module of the fee proxy.
 */
  fee_proxy_module?: string;
  /** the base64-encoded id of the fee proxy.
 */
  fee_proxy_id?: string;
  /** The maximum gas that this transaction's sender committed to use to
execute it.
 */
  gas_limit: number;
  /** The total gas used by the transaction. */
  gas_used: number;
  /** The fee that was charged for the transaction execution (total, native denomination,
ParaTime base units, as a string).
For EVM transactions this is calculated as `gas_price * gas_used`, where `gas_price = fee / gas_limit`, for compatibility with Ethereum.
For other transactions this equals to `fee`.
 */
  charged_fee: string;
  /** The total byte size of the transaction. */
  size: number;
  /** The data relevant to the Oasis-style encrypted transaction.
Note: The term "envelope" in this context refers to the [Oasis-style encryption envelopes](https://github.com/oasisprotocol/oasis-sdk/blob/c36a7ee194abf4ca28fdac0edbefe3843b39bf69/runtime-sdk/src/types/callformat.rs)
which differ slightly from [digital envelopes](https://en.wikipedia.org/wiki/Hybrid_cryptosystem#Envelope_encryption).
 */
  oasis_encryption_envelope?: RuntimeTransactionEncryptionEnvelope;
  /** The method that was called. Defined by the runtime. In theory, this could be any string as the runtimes evolve.
In practice, Nexus currently expects only the following methods:
  - "accounts.Transfer"
  - "consensus.Deposit"
  - "consensus.Withdraw"
  - "consensus.Delegate"
  - "consensus.Undelegate"
  - "evm.Create"
  - "evm.Call"
  - "rofl.Create"
  - "rofl.Update"
  - "rofl.Remove"
  - "rofl.Register"
  - "roflmarket.ProviderCreate"
  - "roflmarket.ProviderUpdate"
  - "roflmarket.ProviderUpdateOffers"
  - "roflmarket.ProviderRemove"
  - "roflmarket.InstanceCreate"
  - "roflmarket.InstanceTopUp"
  - "roflmarket.InstanceCancel"
  - "roflmarket.InstanceExecuteCmds"
  - "roflmarket.InstanceChangeAdmin"
May be null if the transaction was malformed or encrypted.
 */
  method?: string;
  /** The method call body. May be null if the transaction was malformed. */
  body?: RuntimeTransactionBody;
  /** Whether this transaction likely represents a native token transfer.
This is based on a heuristic, and can change at any time without warning and possibly without updating the documentation.
The current heuristic sets this to `true` for:
 - Transactions with method "accounts.Transfer". Those are always native token transfers.
 - Transactions with method "evm.Call" that have no `data` field in their `body`. Those tend to be transfers, but the runtimes provides no reliable visibility into whether a transfer happened.
Note: Other transactions with method "evm.Call", and possibly "evm.Create", may also be (or include) native token transfers. The heuristic will be `false` for those.
 */
  is_likely_native_token_transfer: boolean;
  /** A reasonable "to" Oasis address associated with this transaction,
if applicable. The meaning varies based on the transaction method. Some notable examples:
  - For `method = "accounts.Transfer"`, this is the paratime account receiving the funds.
  - For `method = "consensus.Deposit"`, this is the paratime account receiving the funds.
  - For `method = "consensus.Withdraw"`, this is the consensus (!) account receiving the funds.
  - For `method = "consensus.Delegate"`, this is the consensus (!) account receiving the funds.
  - For `method = "consensus.Undelegate"`, this is the consensus (!) account to which funds were previously delegated. Note that this corresponds with the `.from` field in the transaction body.
  - For `method = "evm.Create"`, this is the address of the newly created smart contract.
  - For `method = "evm.Call"`, this is the address of the called smart contract
 */
  to?: Address;
  /** A reasonable "to" Ethereum address associated with this transaction,
 */
  to_eth?: string;
  /** A reasonable "amount" associated with this transaction, if
applicable. The meaning varies based on the transaction method.
Usually in native denomination, ParaTime units. As a string.
 */
  amount?: string;
  /** The denomination of the "amount" associated with this transaction, if applicable.
 */
  amount_symbol?: string;
  /** The data relevant to the EVM encrypted transaction. Only present for encrypted
transactions in confidential EVM runtimes like Sapphire.
Note: The term "envelope" in this context refers to the [Oasis-style encryption envelopes](https://github.com/oasisprotocol/oasis-sdk/blob/c36a7ee194abf4ca28fdac0edbefe3843b39bf69/runtime-sdk/src/types/callformat.rs)
which differ slightly from [digital envelopes](https://en.wikipedia.org/wiki/Hybrid_cryptosystem#Envelope_encryption).
 */
  encryption_envelope?: RuntimeTransactionEncryptionEnvelope;
  /** Whether this transaction successfully executed.
Is absent in multi-step runtime transactions (`consensus.Deposit`, `consensus.Withdraw`,
`consensus.Delegate`, and `consensus.Undelegate`) until the second step is completed.
Can be absent (meaning "unknown") for confidential runtimes.
 */
  success?: boolean;
  /** The name of the smart contract function called by the transaction.
Only present for `evm.log` transaction calls to contracts that have been verified.
 */
  evm_fn_name?: string;
  /** The decoded parameters with which the smart contract function was called.
Only present for `evm.log` transaction calls to contracts that have been verified.
 */
  evm_fn_params?: EvmAbiParam[];
  /** Error details of a failed transaction. */
  error?: TxError;
}

/**
 * A list of runtime transactions.

 */
export type RuntimeTransactionListAllOf = {
  transactions: RuntimeTransaction[];
};

export type RuntimeTransactionList = List & RuntimeTransactionListAllOf;

export type RuntimeEvmContractVerificationSourceFilesItem = { [key: string]: any };

/**
 * The smart contract's [metadata.json](https://docs.soliditylang.org/en/latest/metadata.html) file in JSON format as defined by Solidity.
Includes the smart contract's [ABI](https://docs.soliditylang.org/en/develop/abi-spec.html).

 */
export type RuntimeEvmContractVerificationCompilationMetadata = { [key: string]: any };

/**
 * The level of verification of a smart contract, as defined by Sourcify.
An absence of this field means that the contract has not been verified.
See also https://docs.sourcify.dev/docs/full-vs-partial-match/

 */
export type VerificationLevel = typeof VerificationLevel[keyof typeof VerificationLevel];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const VerificationLevel = {
  partial: 'partial',
  full: 'full',
} as const;

export interface RuntimeEvmContractVerification {
  verification_level?: VerificationLevel;
  /** The smart contract's [metadata.json](https://docs.soliditylang.org/en/latest/metadata.html) file in JSON format as defined by Solidity.
Includes the smart contract's [ABI](https://docs.soliditylang.org/en/develop/abi-spec.html).
 */
  compilation_metadata?: RuntimeEvmContractVerificationCompilationMetadata;
  /** Array of all contract source files, in JSON format as returned by [Sourcify](https://sourcify.dev/server/api-docs/#/Repository/get_files_any__chain___address_).
 */
  source_files?: RuntimeEvmContractVerificationSourceFilesItem[];
}

export interface RuntimeEvmContract {
  /** The Oasis cryptographic hash of the transaction that created the smart contract.
Can be omitted for contracts that were created by another contract, as opposed
to a direct `Create` call.
 */
  creation_tx?: string;
  /** The Ethereum transaction hash of the transaction in `creation_tx`.
Encoded as a lowercase hex string.
 */
  eth_creation_tx?: string;
  /** The creation bytecode of the smart contract. This includes the constructor logic
and the constructor parameters. When run, this code generates the runtime bytecode.
Can be omitted for contracts that were created by another contract, as opposed
to a direct `Create` call.
 */
  creation_bytecode?: string;
  /** The runtime bytecode of the smart contract. This is the code stored on-chain that
describes a smart contract. Every contract has this info, but Nexus fetches
it separately, so the field may be missing for very fresh contracts (or if the fetching
process is stalled).
 */
  runtime_bytecode?: string;
  /** The total amount of gas used to create or call this contract. */
  gas_used: number;
  /** Additional information obtained from contract verification. Only available for smart
contracts that have been verified successfully by Sourcify.
 */
  verification?: RuntimeEvmContractVerification;
}

/**
 * Details about the EVM token involved in the event, if any.

 */
export interface EvmEventToken {
  type?: EvmTokenType;
  /** Symbol of the token, as provided by token contract's `symbol()` method. */
  symbol?: string;
  /** The number of least significant digits in base units that should be displayed as
decimals when displaying tokens. `tokens = base_units / (10**decimals)`.
Affects display only. Often equals 18, to match ETH.
 */
  decimals?: number;
}

/**
 * A decoded parameter of an event or error emitted from an EVM runtime.
Values of EVM type `int128`, `uint128`, `int256`, `uint256`, `fixed`, and `ufixed` are represented as strings.
Values of EVM type `address` and `address payable` are represented as lowercase hex strings with a "0x" prefix.
Values of EVM type `bytes` and `bytes<N>` are represented as base64 strings.
Values of other EVM types (integer types, strings, arrays, etc.) are represented as their JSON counterpart.

 */
export interface EvmAbiParam {
  /** The parameter name. */
  name: string;
  /** The solidity type of the parameter. */
  evm_type: string;
  /** The parameter value. */
  value: unknown;
}

export type RuntimeEventType = typeof RuntimeEventType[keyof typeof RuntimeEventType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RuntimeEventType = {
  accountstransfer: 'accounts.transfer',
  accountsburn: 'accounts.burn',
  accountsmint: 'accounts.mint',
  consensus_accountsdeposit: 'consensus_accounts.deposit',
  consensus_accountswithdraw: 'consensus_accounts.withdraw',
  consensus_accountsdelegate: 'consensus_accounts.delegate',
  consensus_accountsundelegate_start: 'consensus_accounts.undelegate_start',
  consensus_accountsundelegate_done: 'consensus_accounts.undelegate_done',
  coregas_used: 'core.gas_used',
  evmlog: 'evm.log',
  roflapp_created: 'rofl.app_created',
  roflapp_updated: 'rofl.app_updated',
  roflapp_removed: 'rofl.app_removed',
  roflinstance_registered: 'rofl.instance_registered',
  roflmarketprovider_created: 'roflmarket.provider_created',
  roflmarketprovider_updated: 'roflmarket.provider_updated',
  roflmarketprovider_removed: 'roflmarket.provider_removed',
  roflmarketinstance_created: 'roflmarket.instance_created',
  roflmarketinstance_updated: 'roflmarket.instance_updated',
  roflmarketinstance_accepted: 'roflmarket.instance_accepted',
  roflmarketinstance_cancelled: 'roflmarket.instance_cancelled',
  roflmarketinstance_removed: 'roflmarket.instance_removed',
  roflmarketinstance_command_queued: 'roflmarket.instance_command_queued',
} as const;

/**
 * The decoded event contents, possibly augmented with additional address info.
This spec does not encode the many possible types; instead, see [the Go API](https://pkg.go.dev/github.com/oasisprotocol/oasis-sdk/client-sdk/go/modules).
This object will conform to one of the `*Event` types two levels down
the hierarchy (e.g. `MintEvent` from `accounts > Event > MintEvent`),
OR `evm > Event`. For object fields that specify an oasis-style address, Nexus
will add a field specifying the corresponding Ethereum address, if known. Currently,
the only such possible fields are `from_eth`, `to_eth`, and `owner_eth`.

 */
export type RuntimeEventBody = { [key: string]: any };

/**
 * An event emitted by the runtime layer
 */
export interface RuntimeEvent {
  /** The block height at which this event was generated. */
  round: number;
  /** 0-based index of this event's originating transaction within its block.
Absent if the event did not originate from a transaction.
 */
  tx_index?: number;
  /** Hash of this event's originating transaction.
Absent if the event did not originate from a transaction.
 */
  tx_hash?: string;
  /** Ethereum transaction hash of this event's originating transaction.
Absent if the event did not originate from an EVM transaction.
 */
  eth_tx_hash?: string;
  /** The second-granular consensus time of this event's block.
 */
  timestamp: string;
  /** The type of the event. */
  type: RuntimeEventType;
  /** The decoded event contents, possibly augmented with additional address info.
This spec does not encode the many possible types; instead, see [the Go API](https://pkg.go.dev/github.com/oasisprotocol/oasis-sdk/client-sdk/go/modules).
This object will conform to one of the `*Event` types two levels down
the hierarchy (e.g. `MintEvent` from `accounts > Event > MintEvent`),
OR `evm > Event`. For object fields that specify an oasis-style address, Nexus
will add a field specifying the corresponding Ethereum address, if known. Currently,
the only such possible fields are `from_eth`, `to_eth`, and `owner_eth`.
 */
  body: RuntimeEventBody;
  /** If the event type is `evm.log`, this field describes the human-readable type of
evm event, e.g. `Transfer`.
Absent if the event type is not `evm.log`.
 */
  evm_log_name?: string;
  /** The decoded `evm.log` event data.
Absent if the event type is not `evm.log`.
 */
  evm_log_params?: EvmAbiParam[];
  evm_token?: EvmEventToken;
}

/**
 * A list of runtime events.

 */
export type RuntimeEventListAllOf = {
  events: RuntimeEvent[];
};

export type RuntimeEventList = List & RuntimeEventListAllOf;

/**
 * A ParaTime block.

 */
export interface RuntimeBlock {
  /** The block round. */
  round: number;
  /** The block header hash. */
  hash: string;
  /** The second-granular consensus time. */
  timestamp: string;
  /** The number of transactions in the block. */
  num_transactions: number;
  /** The total byte size of all transactions in the block. */
  size: number;
  /** The total gas used by all transactions in the block. */
  gas_used: number;
  /** The minimum gas price for the block, in base units. */
  min_gas_price?: TextBigInt;
}

/**
 * A list of consensus blocks.

 */
export type RuntimeBlockListAllOf = {
  blocks: RuntimeBlock[];
};

export type RuntimeBlockList = List & RuntimeBlockListAllOf;

export interface ProposalVote {
  /** The staking address casting this vote. */
  address: string;
  /** The vote cast. */
  vote: string;
  /** The block height at which this vote was recorded. */
  height?: number;
  /** The second-granular consensus time of the block in which this vote was cast. */
  timestamp?: string;
}

/**
 * A list of votes for a governance proposal.

 */
export type ProposalVotesAllOf = {
  /** The unique identifier of the proposal. */
  proposal_id: number;
  /** The list of votes for the proposal. */
  votes: ProposalVote[];
};

export type ProposalVotes = List & ProposalVotesAllOf;

/**
 * The state of the proposal.
 */
export type ProposalState = typeof ProposalState[keyof typeof ProposalState];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProposalState = {
  active: 'active',
  passed: 'passed',
  failed: 'failed',
  rejected: 'rejected',
} as const;

/**
 * The target protocol versions for this upgrade proposal.
 */
export interface ProposalTarget {
  consensus_protocol?: string;
  runtime_host_protocol?: string;
  runtime_committee_protocol?: string;
}

/**
 * A governance proposal.

 */
export interface Proposal {
  /** The unique identifier of the proposal. */
  id: number;
  /** The staking address of the proposal submitter. */
  submitter: string;
  state: ProposalState;
  /** The deposit attached to this proposal. */
  deposit: TextBigInt;
  /** The (optional) title of the proposal. */
  title?: string;
  /** The (optional) description of the proposal. */
  description?: string;
  /** The name of the upgrade handler. */
  handler?: string;
  target?: ProposalTarget;
  /** The epoch at which the proposed upgrade will happen. */
  epoch?: number;
  /** The proposal to cancel, if this proposal proposes
cancelling an existing proposal.
 */
  cancels?: number;
  /** The name of the module whose parameters are to be changed
by this 'parameters_change' proposal.
 */
  parameters_change_module?: string;
  /** The parameters change proposal body. This spec does not encode the many possible types; instead, see [the Go API](https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go) of oasis-core. This object will conform to one of the `ConsensusParameterChanges` types, depending on the `parameters_change_module`. */
  parameters_change?: unknown;
  /** The epoch at which this proposal was created. */
  created_at: number;
  /** The epoch at which voting for this proposal will close. */
  closes_at: number;
  /** The number of invalid votes for this proposal, after tallying.
 */
  invalid_votes: TextBigInt;
}

/**
 * A list of governance proposals.

 */
export type ProposalListAllOf = {
  proposals: Proposal[];
};

export type ProposalList = List & ProposalListAllOf;

/**
 * A consensus epoch.

 */
export interface Epoch {
  /** The epoch number. */
  id: number;
  /** The (inclusive) height at which this epoch started. */
  start_height: number;
  /** The (inclusive) height at which this epoch ended. Omitted if the epoch is still active. */
  end_height?: number;
}

/**
 * A list of consensus epochs.

 */
export type EpochListAllOf = {
  epochs: Epoch[];
};

export type EpochList = List & EpochListAllOf;

export interface Allowance {
  /** The allowed account. */
  address: string;
  /** The amount allowed for the allowed account.
This field is omitted when listing multiple accounts.
 */
  amount: TextBigInt;
}

/**
 * A consensus layer account.

 */
export interface Account {
  /** The staking address for this account. */
  address: string;
  /** The expected nonce for the next transaction (= last used nonce + 1) */
  nonce: number;
  /** The available balance, in base units. */
  available: TextBigInt;
  /** Amount delegated to this validator, in base units. */
  escrow: TextBigInt;
  /** Amount debonding from this validator, in base units. */
  debonding: TextBigInt;
  /** The balance of this accounts' (outgoing) delegations, in base units. */
  delegations_balance: TextBigInt;
  /** The balance of this accounts' (outgoing) debonding delegations, in base units. */
  debonding_delegations_balance: TextBigInt;
  /** The second-granular consensus time of the block in which this account was first active.
Dates before Cobalt (2021-04-28) are approximate.
 */
  first_activity?: string;
  /** The allowances made by this account.
This field is omitted when listing multiple accounts.
 */
  allowances: Allowance[];
  stats: AccountStats;
  /** The entity address, if this account is a node belonging to an entity. Only present when querying a single account. */
  entity_node_for?: string;
  /** The entity address, if this account *is* an entity. If present, this address should match the queried address. */
  entity?: string;
}

/**
 * Balance of an account for a specific (implied) runtime and token.

 */
export interface BareTokenHolder {
  /** The Oasis address of the account holder. */
  holder_address: string;
  /** The Ethereum address of the same account holder, if meaningfully defined. */
  eth_holder_address?: string;
  /** Number of tokens held, in base units. */
  balance: TextBigInt;
}

/**
 * A list of token holders for a specific (implied) runtime and token.

 */
export type TokenHolderListAllOf = {
  holders: BareTokenHolder[];
};

export type TokenHolderList = List & TokenHolderListAllOf;

/**
 * Balance of an account for a specific runtime and EVM token.
 */
export interface RuntimeEvmBalance {
  /** Number of tokens held, in base units. */
  balance: TextBigInt;
  /** The Oasis address of this token's contract. */
  token_contract_addr: string;
  /** The EVM address of this token's contract. */
  token_contract_addr_eth: string;
  /** The token ticker symbol. Not guaranteed to be unique across distinct EVM tokens. */
  token_symbol?: string;
  /** The name of the token. Not guaranteed to be unique across distinct EVM tokens. */
  token_name?: string;
  token_type: EvmTokenType;
  /** The number of decimals of precision for this token. */
  token_decimals: number;
}

/**
 * Balance of an account for a specific runtime and oasis-sdk token (e.g. ROSE).
 */
export interface RuntimeSdkBalance {
  /** Number of tokens held, in base units. */
  balance: TextBigInt;
  /** The token ticker symbol. Unique across all oasis-sdk tokens in the same runtime. */
  token_symbol: string;
  /** The number of decimals of precision for this token. */
  token_decimals: number;
}

export type AddressDerivationContext = typeof AddressDerivationContext[keyof typeof AddressDerivationContext];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AddressDerivationContext = {
  'oasis-core/address:_staking': 'oasis-core/address: staking',
  'oasis-runtime-sdk/address:_secp256k1eth': 'oasis-runtime-sdk/address: secp256k1eth',
  'oasis-runtime-sdk/address:_sr25519': 'oasis-runtime-sdk/address: sr25519',
  'oasis-runtime-sdk/address:_multisig': 'oasis-runtime-sdk/address: multisig',
  'oasis-runtime-sdk/address:_module': 'oasis-runtime-sdk/address: module',
  'oasis-runtime-sdk/address:_runtime': 'oasis-runtime-sdk/address: runtime',
} as const;

/**
 * The data from which a consensus-style address (`oasis1...`)
was derived. Notably, for EVM runtimes like Sapphire,
this links the Oasis address and the Ethereum address.

Oasis addresses are derived from a piece of data, such as an ed25519
public key or an Ethereum address. For example, [this](https://github.com/oasisprotocol/oasis-sdk/blob/b37e6da699df331f5a2ac62793f8be099c68469c/client-sdk/go/helpers/address.go#L90-L91)
is how an Ethereum is converted to an Oasis address. The type of underlying data usually also
determines how the signatures for this address are verified.

Consensus supports only "staking addresses" (`context="oasis-core/address: staking"`
below; always ed25519-backed).
Runtimes support all types. This means that every consensus address is also
valid in every runtime. For example, in EVM runtimes, you can use staking
addresses, but only with Oasis tools (e.g. a wallet); EVM contracts such as
ERC20 tokens or tools such as Metamask cannot interact with staking addresses.

 */
export interface AddressPreimage {
  /** The method by which the Oasis address was derived from `address_data`.
 */
  context: AddressDerivationContext;
  /** Version of the `context`. */
  context_version?: number;
  /** The base64-encoded data from which the Oasis address was derived.
When `context = "oasis-runtime-sdk/address: secp256k1eth"`, this
is the Ethereum address (in base64, not hex!).
 */
  address_data: string;
}

/**
 * A list of consensus layer accounts.

 */
export type AccountListAllOf = {
  accounts: Account[];
};

export type AccountList = List & AccountListAllOf;

/**
 * A node registered at the consensus layer.

 */
export interface Node {
  /** The public key identifying this node. */
  id: string;
  /** The public key identifying the entity controlling this node.
 */
  entity_id: string;
  /** The epoch in which this node's commitment expires. */
  expiration: number;
  /** The public key used for establishing TLS connections. */
  tls_pubkey: string;
  /** The public key that will be used for establishing TLS connections
upon rotation.
 */
  tls_next_pubkey: string;
  /** The unique identifier of this node on the P2P transport. */
  p2p_pubkey: string;
  /** The unique identifier of this node as a consensus member */
  consensus_pubkey: string;
  /** A bitmask representing this node's roles. */
  roles: string;
}

/**
 * A list of nodes registered at the consensus layer.

 */
export type NodeListAllOf = {
  entity_id: string;
  nodes: Node[];
};

export type NodeList = List & NodeListAllOf;

export interface ValidatorHistoryPoint {
  /** The epoch number. */
  epoch: number;
  /** The amount of tokens that were delegated to this validator account,
at the start of this epoch, and are NOT in the process of debonding.
 */
  active_balance?: TextBigInt;
  /** The shares of tokens that were delegated to this validator account,
at the start of this epoch, and are NOT in the process of debonding.
 */
  active_shares?: TextBigInt;
  /** The amount of tokens that were delegated to this validator account
at the start of this epoch, but are also in the process of debonding
(i.e. they will be unstaked within ~2 weeks).
 */
  debonding_balance?: TextBigInt;
  /** The shares of tokens that were delegated to this validator account
at the start of this epoch, but are also in the process of debonding
(i.e. they will be unstaked within ~2 weeks).
 */
  debonding_shares?: TextBigInt;
  /** The number of accounts that have delegated token to this account. */
  num_delegators?: number;
}

/**
 * Historical escrow balance data for a single address.
 */
export type ValidatorHistoryAllOf = {
  /** The staking address of the validator. */
  address?: string;
  history: ValidatorHistoryPoint[];
};

export type ValidatorHistory = List & ValidatorHistoryAllOf;

export interface Escrow {
  /** The amount of tokens that are delegated to this validator account, and are NOT in the process of debonding. */
  active_balance?: TextBigInt;
  /** The shares of tokens that are delegated to this validator account, and are NOT in the process of debonding. */
  active_shares?: TextBigInt;
  /** The amount of tokens that are delegated to this validator account, but are also in the process of debonding (i.e. they will be unstaked within ~2 weeks). */
  debonding_balance?: TextBigInt;
  /** The shares of tokens that are delegated to this validator account, but are also in the process of debonding (i.e. they will be unstaked within ~2 weeks). */
  debonding_shares?: TextBigInt;
  /** The amount of token this validator has delegated to itself, and are NOT in the process of debonding. */
  self_delegation_balance?: TextBigInt;
  /** The shares of tokens this validator has delegated to itself, and are NOT in the process of debonding. */
  self_delegation_shares?: TextBigInt;
  /** The active_balance of this validator account 24 hours ago. */
  active_balance_24?: TextBigInt;
  /** The number of accounts that have delegated token to this account. */
  num_delegators?: number;
}

/**
 * Information whether a block was signed by the validator.

 */
export interface ValidatorSignedBlock {
  /** The block height. */
  height: number;
  /** Whether the validator signed the block. */
  signed: boolean;
}

export interface ValidatorMedia {
  /** An URL associated with the entity. */
  url?: string;
  /** An email address associated with the entity. */
  email?: string;
  /** Twitter handle. */
  twitter?: string;
  /** Keybase handle. */
  keybase?: string;
  /** The human-readable name of this entity. */
  name?: string;
  /** URL to a logo image for the entity. */
  logoUrl?: string;
}

export interface ValidatorCommissionBound {
  lower: number;
  upper: number;
  epoch_start: number;
  epoch_end: number;
}

/**
 * An validator registered at the consensus layer.

 */
export interface Validator {
  /** The staking address identifying this validator. */
  entity_address: string;
  /** The public key identifying this validator. */
  entity_id: string;
  /** The public key identifying this validator's node. */
  node_id?: string;
  /** The escrow account data for this validator. */
  escrow: Escrow;
  /** The voting power of this validator. */
  voting_power: number;
  /** The cumulative voting power of this validator and all other validators ranked higher than itself. */
  voting_power_cumulative?: number;
  /** Whether the entity has a node that is registered for being a validator, node is up to date, and has successfully registered itself. It may or may not be part of validator set. */
  active: boolean;
  /** The second-granular consensus time. */
  start_date: string;
  /** The rank of the validator, determined by voting power. */
  rank: number;
  /** Whether the entity is part of the validator set (top <scheduler.params.max_validators> by stake among active entities). */
  in_validator_set: boolean;
  media?: ValidatorMedia;
  /** Commission rate. */
  current_rate: number;
  current_commission_bound: ValidatorCommissionBound;
  /** An array containing details of the last 100 consensus blocks, indicating whether each block was signed by the validator. Only available when querying a single validator. */
  signed_blocks?: ValidatorSignedBlock[];
}

export interface ValidatorAggStats {
  /** The total voting power across all validators. */
  total_voting_power: number;
  /** The total number of delegators in the network. */
  total_delegators: number;
  /** The total amount of token staked to validators. */
  total_staked_balance: TextBigInt;
}

/**
 * A list of validators registered at the consensus layer, plus summary
statistics across all consensus validators.

 */
export type ValidatorListAllOf = {
  validators: Validator[];
  /** Summary statistics across all consensus validators. */
  stats: ValidatorAggStats;
};

export type ValidatorList = List & ValidatorListAllOf;

export interface ValidatorsResponse {
  validator_list: ValidatorList;
  /** Summary statistics across all consensus validators. */
  stats: ValidatorAggStats;
}

/**
 * An entity registered at the consensus layer.

 */
export interface Entity {
  /** The public key identifying this entity. */
  id: string;
  /** The staking address belonging to this entity; derived from the entity's public key. */
  address: string;
  /** The vector of nodes owned by this entity. */
  nodes: string[];
}

/**
 * A list of entities registered at the consensus layer.

 */
export type EntityListAllOf = {
  entities: Entity[];
};

export type EntityList = List & EntityListAllOf;

/**
 * The "body" of a message is a structure within the
`github.com/oasisprotocol/oasis-core/go/roothash/api/message`
`Message` structure
(https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/roothash/api/message#Message).
For example, if the type is `staking.withdraw`, the body is the Go
`Message` structure's `.Staking.Withdraw` field, which is a
`github.com/oasisprotocol/oasis-core/go/staking/api` `Withdraw`
structure
(https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/staking/api#Withdraw),
with `from` and `amount` fields in JSON.

 */
export type RoothashMessageBody = { [key: string]: any };

export interface RoothashMessage {
  /** The runtime that sent this message.
 */
  runtime: string;
  /** The block round when the runtime sent this message.
 */
  round: number;
  /** The 0-based index of this message in the block.
 */
  index: number;
  /** The type of this message.
 */
  type?: RoothashMessageType;
  /** The "body" of a message is a structure within the
`github.com/oasisprotocol/oasis-core/go/roothash/api/message`
`Message` structure
(https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/roothash/api/message#Message).
For example, if the type is `staking.withdraw`, the body is the Go
`Message` structure's `.Staking.Withdraw` field, which is a
`github.com/oasisprotocol/oasis-core/go/staking/api` `Withdraw`
structure
(https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/staking/api#Withdraw),
with `from` and `amount` fields in JSON.
 */
  body?: RoothashMessageBody;
  /** If executing this message resulted in an error, this is the
error's module.
 */
  error_module?: string;
  /** If executing this message resulted in an error, this is the
error's code.
 */
  error_code?: number;
  /** A result value that consensus provided after executing this
message. These aren't centrally registered anywhere, so look at
the consensus apps' `ExecuteMessage`
(https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/consensus/cometbft/api#MessageSubscriber)
implementations to see what they return. For example, a
`staking.withdraw` type message gives a
`github.com/oasisprotocol/oasis-core/go/staking/api`
`WithdrawResult` structure as its result
(`https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/staking/api#WithdrawResult`)
with `owner`, `beneficiary`, `allowance`, and `amount_change`
fields.
 */
  result?: unknown;
}

export type RoothashMessageListAllOf = {
  roothash_messages: RoothashMessage[];
};

export type RoothashMessageList = List & RoothashMessageListAllOf;

export type RoothashMessageType = typeof RoothashMessageType[keyof typeof RoothashMessageType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RoothashMessageType = {
  stakingtransfer: 'staking.transfer',
  stakingwithdraw: 'staking.withdraw',
  stakingadd_escrow: 'staking.add_escrow',
  stakingreclaim_escrow: 'staking.reclaim_escrow',
  registryupdate_runtime: 'registry.update_runtime',
  governancecast_vote: 'governance.cast_vote',
  governancesubmit_proposal: 'governance.submit_proposal',
} as const;

/**
 * The event contents. This spec does not encode the many possible types;
instead, see [the Go API](https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/consensus/api/transaction/results#Event) of oasis-core.
This object will conform to one of the `*Event` types two levels down
the hierarchy, e.g. `TransferEvent` from `Event > staking.Event > TransferEvent`

 */
export type ConsensusEventBody = { [key: string]: any };

/**
 * A list of consensus events.

 */
export type ConsensusEventListAllOf = {
  events: ConsensusEvent[];
};

export type ConsensusEventList = List & ConsensusEventListAllOf;

export type ConsensusEventType = typeof ConsensusEventType[keyof typeof ConsensusEventType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConsensusEventType = {
  governanceproposal_executed: 'governance.proposal_executed',
  governanceproposal_finalized: 'governance.proposal_finalized',
  governanceproposal_submitted: 'governance.proposal_submitted',
  governancevote: 'governance.vote',
  registryentity: 'registry.entity',
  registrynode_unfrozen: 'registry.node_unfrozen',
  registrynode: 'registry.node',
  registryruntime: 'registry.runtime',
  registryruntime_suspended: 'registry.runtime_suspended',
  roothashexecution_discrepancy: 'roothash.execution_discrepancy',
  roothashexecutor_committed: 'roothash.executor_committed',
  roothashfinalized: 'roothash.finalized',
  roothashmessage: 'roothash.message',
  roothashin_msg_processed: 'roothash.in_msg_processed',
  stakingallowance_change: 'staking.allowance_change',
  stakingburn: 'staking.burn',
  stakingescrowadd: 'staking.escrow.add',
  stakingescrowdebonding_start: 'staking.escrow.debonding_start',
  stakingescrowreclaim: 'staking.escrow.reclaim',
  stakingescrowtake: 'staking.escrow.take',
  stakingtransfer: 'staking.transfer',
} as const;

/**
 * An event emitted by the consensus layer.

 */
export interface ConsensusEvent {
  /** The block height at which this event was generated. */
  block: number;
  /** 0-based index of this event's originating transaction within its block.
Absent if the event did not originate from a transaction.
 */
  tx_index?: number;
  /** Hash of this event's originating transaction.
Absent if the event did not originate from a transaction.
 */
  tx_hash?: string;
  /** The ID of the runtime to which the event relates, encoded in hex.
Present only for events of type `roothash.*`.
 */
  roothash_runtime_id?: string;
  /** The runtime to which the event relates.
Present only for events of type `roothash.*`.
 */
  roothash_runtime?: Runtime;
  /** When applicable, the round in the runtime to which this event
relates.
Present only for events of type `roothash.*` except for
`roothash.execution_discrepancy` before Eden.
 */
  roothash_runtime_round?: number;
  /** The second-granular consensus time of this event's block.
 */
  timestamp?: string;
  /** The type of the event. */
  type: ConsensusEventType;
  /** The event contents. This spec does not encode the many possible types;
instead, see [the Go API](https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go/consensus/api/transaction/results#Event) of oasis-core.
This object will conform to one of the `*Event` types two levels down
the hierarchy, e.g. `TransferEvent` from `Event > staking.Event > TransferEvent`
 */
  body: ConsensusEventBody;
}

export interface TxError {
  /** The module of a failed transaction. */
  module?: string;
  /** The status code of a failed transaction. */
  code: number;
  /** The message of a failed transaction.
This field, like `code` and `module`, can represent an error that originated
anywhere in the paratime, i.e. either inside or outside a smart contract.

A common special case worth calling out: When the paratime is
EVM-compatible (e.g. Emerald or Sapphire) and the error originates
inside a smart contract (using `revert` in solidity), the following
will be true:
- `module` will be "evm" and `code` will be 8; see [here](https://github.com/oasisprotocol/oasis-sdk/blob/runtime-sdk/v0.8.3/runtime-sdk/modules/evm/src/lib.rs#L128) for other possible errors in the `evm` module.
- `message` will contain the best-effort human-readable revert reason.
- `raw_message` will contain the raw revert reason. This is useful for cases where the `message` parsing fails
 */
  message?: string;
  /** The error parameters, as decoded using the contract abi. Present only when
- the error originated from within a smart contract (e.g. via `revert` in Solidity), and
- the contract is verified or the revert reason is a plain String.
If this field is present, `message` will include the name of the error, e.g. 'InsufficientBalance'.
Note that users should be cautious when evaluating error data since the
data origin is not tracked and error information can be faked.
 */
  revert_params?: EvmAbiParam[];
  /** The unparsed transaction error message.
 */
  raw_message?: string;
}

/**
 * The method call body. This spec does not encode the many possible types; instead, see [the Go API](https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go) of oasis-core. This object will conform to one of the types passed to variable instantiations using `NewMethodName` two levels down the hierarchy, e.g. `MethodTransfer` from `oasis-core/go/staking/api` seen [here](https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go@v0.2300.10/staking/api#pkg-variables).
 */
export type TransactionBody = { [key: string]: any };

/**
 * A consensus transaction.

 */
export interface Transaction {
  /** The block height at which this transaction was executed. */
  block: number;
  /** 0-based index of this transaction in its block */
  index: number;
  /** The second-granular consensus time of this tx's block, i.e. roughly when the
[block was proposed](https://github.com/tendermint/tendermint/blob/v0.34.x/spec/core/data_structures.md#header).
 */
  timestamp: string;
  /** The cryptographic hash of this transaction's encoding. */
  hash: string;
  /** The address of who sent this transaction. */
  sender: string;
  /** The nonce used with this transaction, to prevent replay. */
  nonce: number;
  /** The fee that this transaction's sender committed
to pay to execute it.
 */
  fee: TextBigInt;
  /** The maximum gas that a transaction can use.
 */
  gas_limit: TextBigInt;
  /** The method that was called. */
  method: ConsensusTxMethod;
  /** The method call body. This spec does not encode the many possible types; instead, see [the Go API](https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go) of oasis-core. This object will conform to one of the types passed to variable instantiations using `NewMethodName` two levels down the hierarchy, e.g. `MethodTransfer` from `oasis-core/go/staking/api` seen [here](https://pkg.go.dev/github.com/oasisprotocol/oasis-core/go@v0.2300.10/staking/api#pkg-variables). */
  body: TransactionBody;
  /** Whether this transaction successfully executed. */
  success: boolean;
  /** Error details of a failed transaction. */
  error?: TxError;
}

/**
 * A list of consensus transactions.

 */
export type TransactionListAllOf = {
  transactions: Transaction[];
};

export type ConsensusTxMethod = typeof ConsensusTxMethod[keyof typeof ConsensusTxMethod];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConsensusTxMethod = {
  beaconPVSSCommit: 'beacon.PVSSCommit',
  beaconPVSSReveal: 'beacon.PVSSReveal',
  beaconVRFProve: 'beacon.VRFProve',
  consensusMeta: 'consensus.Meta',
  governanceCastVote: 'governance.CastVote',
  governanceSubmitProposal: 'governance.SubmitProposal',
  keymanagerPublishEphemeralSecret: 'keymanager.PublishEphemeralSecret',
  keymanagerPublishMasterSecret: 'keymanager.PublishMasterSecret',
  keymanagerUpdatePolicy: 'keymanager.UpdatePolicy',
  registryDeregisterEntity: 'registry.DeregisterEntity',
  registryProveFreshness: 'registry.ProveFreshness',
  registryRegisterEntity: 'registry.RegisterEntity',
  registryRegisterNode: 'registry.RegisterNode',
  registryRegisterRuntime: 'registry.RegisterRuntime',
  registryUnfreezeNode: 'registry.UnfreezeNode',
  roothashEvidence: 'roothash.Evidence',
  roothashExecutorCommit: 'roothash.ExecutorCommit',
  roothashExecutorProposerTimeout: 'roothash.ExecutorProposerTimeout',
  roothashSubmitMsg: 'roothash.SubmitMsg',
  stakingAddEscrow: 'staking.AddEscrow',
  stakingAllow: 'staking.Allow',
  stakingAmendCommissionSchedule: 'staking.AmendCommissionSchedule',
  stakingBurn: 'staking.Burn',
  stakingReclaimEscrow: 'staking.ReclaimEscrow',
  stakingTransfer: 'staking.Transfer',
  stakingWithdraw: 'staking.Withdraw',
  'keymanager/churpApply': 'keymanager/churp.Apply',
  'keymanager/churpConfirm': 'keymanager/churp.Confirm',
  'keymanager/churpCreate': 'keymanager/churp.Create',
  'keymanager/churpUpdate': 'keymanager/churp.Update',
  vaultAuthorizeAction: 'vault.AuthorizeAction',
  vaultCancelAction: 'vault.CancelAction',
  vaultCreate: 'vault.Create',
} as const;

/**
 * A debonding delegation.

 */
export interface DebondingDelegation {
  /** The amount of tokens delegated in base units. */
  amount: TextBigInt;
  /** The shares of tokens delegated. */
  shares: TextBigInt;
  /** The delegatee (validator) address. */
  validator: string;
  /** The delegator address. */
  delegator: string;
  /** The epoch at which the debonding ends. */
  debond_end: number;
}

/**
 * A list of debonding delegations.

 */
export type DebondingDelegationListAllOf = {
  debonding_delegations: DebondingDelegation[];
};

/**
 * A delegation.

 */
export interface Delegation {
  /** The amount of tokens delegated in base units. */
  amount: TextBigInt;
  /** The shares of tokens delegated. */
  shares: TextBigInt;
  /** The delegatee (validator) address. */
  validator: string;
  /** The delegator address. */
  delegator: string;
}

/**
 * A list of delegations.

 */
export type DelegationListAllOf = {
  delegations: Delegation[];
};

export type DelegationList = List & DelegationListAllOf;

/**
 * Light-weight entity information, containing only its ID, address and registry metadata.
 */
export interface EntityInfo {
  /** The ID of the entity owning the node; this corresponds to the entity's public key in base64. */
  entity_id?: string;
  /** Address of the entity owning the node, in Bech32 format (`oasis1...`). */
  entity_address?: string;
  /** Metadata about an entity, if available. See [the metadata registry](https://github.com/oasisprotocol/metadata-registry) for details.

When available, it is an object with some subset of the following fields:

- `v`: The version of the metadata structure (always present).
- `serial`: The serial number of the metadata statement (always present).
- `name`: The name of the entity.
- `url`: The URL associated with the entity.
- `email`: The email address associated with the entity.
- `keybase`: Tne entity's keybase.io handle.
- `twitter`: The twitter handle associated with the entity.
 */
  entity_metadata?: unknown;
}

/**
 * A consensus block.

 */
export interface Block {
  /** The block height. */
  height: number;
  /** The block header hash. */
  hash: string;
  /** The second-granular consensus time. */
  timestamp: string;
  /** Number of transactions in the block. */
  num_transactions: number;
  /** The gas limit for the block. A gas limit 0 means that the max block gas was unlimited.
Blocks from Cobalt, Damask, and early Eden had no gas limit as their sizes were only
restricted by byte size until an upgrade during Eden introduced a gas limit.
 */
  gas_limit: TextBigInt;
  /** The size limit for the block in bytes.
 */
  size_limit?: TextBigInt;
  /** The epoch number of the epoch in which the block was produced. */
  epoch: number;
  /** The Merkle root of the state tree after applying the block. */
  state_root: string;
  /** The entity that proposed this block. */
  proposer: EntityInfo;
  /** A list of the entities that signed the block. */
  signers?: EntityInfo[];
}

export type BlockListAllOf = {
  blocks: Block[];
};

export interface Status {
  /** The height of the most recent indexed block. Compare with latest_node_block to measure
how far behind Nexus is from the chain.
 */
  latest_block: number;
  /** The height of the most recently produced block on-chain as seen by Nexus. */
  latest_node_block: number;
  /** The RFC 3339 formatted consensus time of when the most recently indexed block was produced. */
  latest_block_time: string;
  /** The number of milliseconds since Nexus processed the latest block. */
  latest_update_age_ms: number;
}

export interface List {
  /** The total number of records that match the query, i.e. the number of records
the query would return with limit=infinity.
 */
  total_count: number;
  /** Whether total_count is clipped for performance reasons. */
  is_total_count_clipped: boolean;
}

export type TransactionList = List & TransactionListAllOf;

export type DebondingDelegationList = List & DebondingDelegationListAllOf;

/**
 * A list of consensus blocks.

 */
export type BlockList = List & BlockListAllOf;

export type CallFormat = string;

/**
 * A base64-encoded ed25519 public key.
 */
export type Ed25519PubKey = string;

export type EthOrOasisAddress = string;

/**
 * An Oasis-style (bech32) address.
 */
export type Address = string;

export type TextBigInt = string;

/**
 * An Oasis-style (bech32) address.
 */
export type StakingAddress = string;

export type Runtime = typeof Runtime[keyof typeof Runtime];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Runtime = {
  emerald: 'emerald',
  sapphire: 'sapphire',
  pontusxtest: 'pontusxtest',
  pontusxdev: 'pontusxdev',
  cipher: 'cipher',
} as const;

export type Layer = typeof Layer[keyof typeof Layer];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Layer = {
  emerald: 'emerald',
  sapphire: 'sapphire',
  pontusxtest: 'pontusxtest',
  pontusxdev: 'pontusxdev',
  cipher: 'cipher',
  consensus: 'consensus',
} as const;



type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Returns the status of indexing.
 */
export const getStatus = (
    
 options?: SecondParameter<typeof getStatusMutator>,signal?: AbortSignal
) => {
      return getStatusMutator<Status>(
      {url: `/`, method: 'get', signal
    },
      options);
    }
  

export const getGetStatusQueryKey = () => [`/`] as const;
  

    
export const getGetStatusQueryOptions = <TData = Awaited<ReturnType<typeof getStatus>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getStatus>>, TError, TData>, request?: SecondParameter<typeof getStatusMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getStatus>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStatusQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStatus>>> = ({ signal }) => getStatus(requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getStatus>>>
export type GetStatusQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns the status of indexing.
 */
export const useGetStatus = <TData = Awaited<ReturnType<typeof getStatus>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getStatus>>, TError, TData>, request?: SecondParameter<typeof getStatusMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetStatusQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns the total supply of the consensus layer token in token units.
 */
export const getConsensusTotalSupplyRaw = (
    
 options?: SecondParameter<typeof getConsensusTotalSupplyRawMutator>,signal?: AbortSignal
) => {
      return getConsensusTotalSupplyRawMutator<string>(
      {url: `/consensus/total_supply_raw`, method: 'get', signal
    },
      options);
    }
  

export const getGetConsensusTotalSupplyRawQueryKey = () => [`/consensus/total_supply_raw`] as const;
  

    
export const getGetConsensusTotalSupplyRawQueryOptions = <TData = Awaited<ReturnType<typeof getConsensusTotalSupplyRaw>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusTotalSupplyRaw>>, TError, TData>, request?: SecondParameter<typeof getConsensusTotalSupplyRawMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getConsensusTotalSupplyRaw>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConsensusTotalSupplyRawQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConsensusTotalSupplyRaw>>> = ({ signal }) => getConsensusTotalSupplyRaw(requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetConsensusTotalSupplyRawQueryResult = NonNullable<Awaited<ReturnType<typeof getConsensusTotalSupplyRaw>>>
export type GetConsensusTotalSupplyRawQueryError = unknown

/**
 * @summary Returns the total supply of the consensus layer token in token units.
 */
export const useGetConsensusTotalSupplyRaw = <TData = Awaited<ReturnType<typeof getConsensusTotalSupplyRaw>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusTotalSupplyRaw>>, TError, TData>, request?: SecondParameter<typeof getConsensusTotalSupplyRawMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetConsensusTotalSupplyRawQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns the circulating supply of the consensus layer token in token units.
 */
export const getConsensusCirculatingSupplyRaw = (
    
 options?: SecondParameter<typeof getConsensusCirculatingSupplyRawMutator>,signal?: AbortSignal
) => {
      return getConsensusCirculatingSupplyRawMutator<string>(
      {url: `/consensus/circulating_supply_raw`, method: 'get', signal
    },
      options);
    }
  

export const getGetConsensusCirculatingSupplyRawQueryKey = () => [`/consensus/circulating_supply_raw`] as const;
  

    
export const getGetConsensusCirculatingSupplyRawQueryOptions = <TData = Awaited<ReturnType<typeof getConsensusCirculatingSupplyRaw>>, TError = unknown>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusCirculatingSupplyRaw>>, TError, TData>, request?: SecondParameter<typeof getConsensusCirculatingSupplyRawMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getConsensusCirculatingSupplyRaw>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConsensusCirculatingSupplyRawQueryKey();

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConsensusCirculatingSupplyRaw>>> = ({ signal }) => getConsensusCirculatingSupplyRaw(requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetConsensusCirculatingSupplyRawQueryResult = NonNullable<Awaited<ReturnType<typeof getConsensusCirculatingSupplyRaw>>>
export type GetConsensusCirculatingSupplyRawQueryError = unknown

/**
 * @summary Returns the circulating supply of the consensus layer token in token units.
 */
export const useGetConsensusCirculatingSupplyRaw = <TData = Awaited<ReturnType<typeof getConsensusCirculatingSupplyRaw>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusCirculatingSupplyRaw>>, TError, TData>, request?: SecondParameter<typeof getConsensusCirculatingSupplyRawMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetConsensusCirculatingSupplyRawQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a list of consensus blocks, sorted from most to least recent.
 */
export const getConsensusBlocks = (
    params?: GetConsensusBlocksParams,
 options?: SecondParameter<typeof getConsensusBlocksMutator>,signal?: AbortSignal
) => {
      return getConsensusBlocksMutator<BlockList>(
      {url: `/consensus/blocks`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetConsensusBlocksQueryKey = (params?: GetConsensusBlocksParams,) => [`/consensus/blocks`, ...(params ? [params]: [])] as const;
  

    
export const getGetConsensusBlocksQueryOptions = <TData = Awaited<ReturnType<typeof getConsensusBlocks>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(params?: GetConsensusBlocksParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusBlocks>>, TError, TData>, request?: SecondParameter<typeof getConsensusBlocksMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getConsensusBlocks>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConsensusBlocksQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConsensusBlocks>>> = ({ signal }) => getConsensusBlocks(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetConsensusBlocksQueryResult = NonNullable<Awaited<ReturnType<typeof getConsensusBlocks>>>
export type GetConsensusBlocksQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a list of consensus blocks, sorted from most to least recent.
 */
export const useGetConsensusBlocks = <TData = Awaited<ReturnType<typeof getConsensusBlocks>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 params?: GetConsensusBlocksParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusBlocks>>, TError, TData>, request?: SecondParameter<typeof getConsensusBlocksMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetConsensusBlocksQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a consensus block.
 */
export const getConsensusBlocksHeight = (
    height: number,
 options?: SecondParameter<typeof getConsensusBlocksHeightMutator>,signal?: AbortSignal
) => {
      return getConsensusBlocksHeightMutator<Block>(
      {url: `/consensus/blocks/${height}`, method: 'get', signal
    },
      options);
    }
  

export const getGetConsensusBlocksHeightQueryKey = (height: number,) => [`/consensus/blocks/${height}`] as const;
  

    
export const getGetConsensusBlocksHeightQueryOptions = <TData = Awaited<ReturnType<typeof getConsensusBlocksHeight>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(height: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusBlocksHeight>>, TError, TData>, request?: SecondParameter<typeof getConsensusBlocksHeightMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getConsensusBlocksHeight>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConsensusBlocksHeightQueryKey(height);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConsensusBlocksHeight>>> = ({ signal }) => getConsensusBlocksHeight(height, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(height), ...queryOptions}}

export type GetConsensusBlocksHeightQueryResult = NonNullable<Awaited<ReturnType<typeof getConsensusBlocksHeight>>>
export type GetConsensusBlocksHeightQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a consensus block.
 */
export const useGetConsensusBlocksHeight = <TData = Awaited<ReturnType<typeof getConsensusBlocksHeight>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 height: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusBlocksHeight>>, TError, TData>, request?: SecondParameter<typeof getConsensusBlocksHeightMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetConsensusBlocksHeightQueryOptions(height,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a list of consensus transactions.
 */
export const getConsensusTransactions = (
    params?: GetConsensusTransactionsParams,
 options?: SecondParameter<typeof getConsensusTransactionsMutator>,signal?: AbortSignal
) => {
      return getConsensusTransactionsMutator<TransactionList>(
      {url: `/consensus/transactions`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetConsensusTransactionsQueryKey = (params?: GetConsensusTransactionsParams,) => [`/consensus/transactions`, ...(params ? [params]: [])] as const;
  

    
export const getGetConsensusTransactionsQueryOptions = <TData = Awaited<ReturnType<typeof getConsensusTransactions>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(params?: GetConsensusTransactionsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusTransactions>>, TError, TData>, request?: SecondParameter<typeof getConsensusTransactionsMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getConsensusTransactions>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConsensusTransactionsQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConsensusTransactions>>> = ({ signal }) => getConsensusTransactions(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetConsensusTransactionsQueryResult = NonNullable<Awaited<ReturnType<typeof getConsensusTransactions>>>
export type GetConsensusTransactionsQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a list of consensus transactions.
 */
export const useGetConsensusTransactions = <TData = Awaited<ReturnType<typeof getConsensusTransactions>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 params?: GetConsensusTransactionsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusTransactions>>, TError, TData>, request?: SecondParameter<typeof getConsensusTransactionsMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetConsensusTransactionsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns consensus transactions with the given transaction hash.
 */
export const getConsensusTransactionsTxHash = (
    txHash: string,
 options?: SecondParameter<typeof getConsensusTransactionsTxHashMutator>,signal?: AbortSignal
) => {
      return getConsensusTransactionsTxHashMutator<TransactionList>(
      {url: `/consensus/transactions/${txHash}`, method: 'get', signal
    },
      options);
    }
  

export const getGetConsensusTransactionsTxHashQueryKey = (txHash: string,) => [`/consensus/transactions/${txHash}`] as const;
  

    
export const getGetConsensusTransactionsTxHashQueryOptions = <TData = Awaited<ReturnType<typeof getConsensusTransactionsTxHash>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(txHash: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusTransactionsTxHash>>, TError, TData>, request?: SecondParameter<typeof getConsensusTransactionsTxHashMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getConsensusTransactionsTxHash>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConsensusTransactionsTxHashQueryKey(txHash);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConsensusTransactionsTxHash>>> = ({ signal }) => getConsensusTransactionsTxHash(txHash, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(txHash), ...queryOptions}}

export type GetConsensusTransactionsTxHashQueryResult = NonNullable<Awaited<ReturnType<typeof getConsensusTransactionsTxHash>>>
export type GetConsensusTransactionsTxHashQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns consensus transactions with the given transaction hash.
 */
export const useGetConsensusTransactionsTxHash = <TData = Awaited<ReturnType<typeof getConsensusTransactionsTxHash>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 txHash: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusTransactionsTxHash>>, TError, TData>, request?: SecondParameter<typeof getConsensusTransactionsTxHashMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetConsensusTransactionsTxHashQueryOptions(txHash,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a list of consensus events.
 */
export const getConsensusEvents = (
    params?: GetConsensusEventsParams,
 options?: SecondParameter<typeof getConsensusEventsMutator>,signal?: AbortSignal
) => {
      return getConsensusEventsMutator<ConsensusEventList>(
      {url: `/consensus/events`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetConsensusEventsQueryKey = (params?: GetConsensusEventsParams,) => [`/consensus/events`, ...(params ? [params]: [])] as const;
  

    
export const getGetConsensusEventsQueryOptions = <TData = Awaited<ReturnType<typeof getConsensusEvents>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(params?: GetConsensusEventsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusEvents>>, TError, TData>, request?: SecondParameter<typeof getConsensusEventsMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getConsensusEvents>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConsensusEventsQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConsensusEvents>>> = ({ signal }) => getConsensusEvents(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetConsensusEventsQueryResult = NonNullable<Awaited<ReturnType<typeof getConsensusEvents>>>
export type GetConsensusEventsQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a list of consensus events.
 */
export const useGetConsensusEvents = <TData = Awaited<ReturnType<typeof getConsensusEvents>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 params?: GetConsensusEventsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusEvents>>, TError, TData>, request?: SecondParameter<typeof getConsensusEventsMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetConsensusEventsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


export const getConsensusRoothashMessages = (
    params: GetConsensusRoothashMessagesParams,
 options?: SecondParameter<typeof getConsensusRoothashMessagesMutator>,signal?: AbortSignal
) => {
      return getConsensusRoothashMessagesMutator<RoothashMessageList>(
      {url: `/consensus/roothash_messages`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetConsensusRoothashMessagesQueryKey = (params: GetConsensusRoothashMessagesParams,) => [`/consensus/roothash_messages`, ...(params ? [params]: [])] as const;
  

    
export const getGetConsensusRoothashMessagesQueryOptions = <TData = Awaited<ReturnType<typeof getConsensusRoothashMessages>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(params: GetConsensusRoothashMessagesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusRoothashMessages>>, TError, TData>, request?: SecondParameter<typeof getConsensusRoothashMessagesMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getConsensusRoothashMessages>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConsensusRoothashMessagesQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConsensusRoothashMessages>>> = ({ signal }) => getConsensusRoothashMessages(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetConsensusRoothashMessagesQueryResult = NonNullable<Awaited<ReturnType<typeof getConsensusRoothashMessages>>>
export type GetConsensusRoothashMessagesQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

export const useGetConsensusRoothashMessages = <TData = Awaited<ReturnType<typeof getConsensusRoothashMessages>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 params: GetConsensusRoothashMessagesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusRoothashMessages>>, TError, TData>, request?: SecondParameter<typeof getConsensusRoothashMessagesMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetConsensusRoothashMessagesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a list of entities registered at the consensus layer.
 */
export const getConsensusEntities = (
    params?: GetConsensusEntitiesParams,
 options?: SecondParameter<typeof getConsensusEntitiesMutator>,signal?: AbortSignal
) => {
      return getConsensusEntitiesMutator<EntityList>(
      {url: `/consensus/entities`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetConsensusEntitiesQueryKey = (params?: GetConsensusEntitiesParams,) => [`/consensus/entities`, ...(params ? [params]: [])] as const;
  

    
export const getGetConsensusEntitiesQueryOptions = <TData = Awaited<ReturnType<typeof getConsensusEntities>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(params?: GetConsensusEntitiesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusEntities>>, TError, TData>, request?: SecondParameter<typeof getConsensusEntitiesMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getConsensusEntities>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConsensusEntitiesQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConsensusEntities>>> = ({ signal }) => getConsensusEntities(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetConsensusEntitiesQueryResult = NonNullable<Awaited<ReturnType<typeof getConsensusEntities>>>
export type GetConsensusEntitiesQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a list of entities registered at the consensus layer.
 */
export const useGetConsensusEntities = <TData = Awaited<ReturnType<typeof getConsensusEntities>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 params?: GetConsensusEntitiesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusEntities>>, TError, TData>, request?: SecondParameter<typeof getConsensusEntitiesMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetConsensusEntitiesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns an entity registered at the consensus layer.
 */
export const getConsensusEntitiesAddress = (
    address: StakingAddress,
 options?: SecondParameter<typeof getConsensusEntitiesAddressMutator>,signal?: AbortSignal
) => {
      return getConsensusEntitiesAddressMutator<Entity>(
      {url: `/consensus/entities/${address}`, method: 'get', signal
    },
      options);
    }
  

export const getGetConsensusEntitiesAddressQueryKey = (address: StakingAddress,) => [`/consensus/entities/${address}`] as const;
  

    
export const getGetConsensusEntitiesAddressQueryOptions = <TData = Awaited<ReturnType<typeof getConsensusEntitiesAddress>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(address: StakingAddress, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusEntitiesAddress>>, TError, TData>, request?: SecondParameter<typeof getConsensusEntitiesAddressMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getConsensusEntitiesAddress>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConsensusEntitiesAddressQueryKey(address);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConsensusEntitiesAddress>>> = ({ signal }) => getConsensusEntitiesAddress(address, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(address), ...queryOptions}}

export type GetConsensusEntitiesAddressQueryResult = NonNullable<Awaited<ReturnType<typeof getConsensusEntitiesAddress>>>
export type GetConsensusEntitiesAddressQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns an entity registered at the consensus layer.
 */
export const useGetConsensusEntitiesAddress = <TData = Awaited<ReturnType<typeof getConsensusEntitiesAddress>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 address: StakingAddress, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusEntitiesAddress>>, TError, TData>, request?: SecondParameter<typeof getConsensusEntitiesAddressMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetConsensusEntitiesAddressQueryOptions(address,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a list of nodes registered at the consensus layer.
 */
export const getConsensusEntitiesAddressNodes = (
    address: StakingAddress,
    params?: GetConsensusEntitiesAddressNodesParams,
 options?: SecondParameter<typeof getConsensusEntitiesAddressNodesMutator>,signal?: AbortSignal
) => {
      return getConsensusEntitiesAddressNodesMutator<NodeList>(
      {url: `/consensus/entities/${address}/nodes`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetConsensusEntitiesAddressNodesQueryKey = (address: StakingAddress,
    params?: GetConsensusEntitiesAddressNodesParams,) => [`/consensus/entities/${address}/nodes`, ...(params ? [params]: [])] as const;
  

    
export const getGetConsensusEntitiesAddressNodesQueryOptions = <TData = Awaited<ReturnType<typeof getConsensusEntitiesAddressNodes>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(address: StakingAddress,
    params?: GetConsensusEntitiesAddressNodesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusEntitiesAddressNodes>>, TError, TData>, request?: SecondParameter<typeof getConsensusEntitiesAddressNodesMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getConsensusEntitiesAddressNodes>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConsensusEntitiesAddressNodesQueryKey(address,params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConsensusEntitiesAddressNodes>>> = ({ signal }) => getConsensusEntitiesAddressNodes(address,params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(address), ...queryOptions}}

export type GetConsensusEntitiesAddressNodesQueryResult = NonNullable<Awaited<ReturnType<typeof getConsensusEntitiesAddressNodes>>>
export type GetConsensusEntitiesAddressNodesQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a list of nodes registered at the consensus layer.
 */
export const useGetConsensusEntitiesAddressNodes = <TData = Awaited<ReturnType<typeof getConsensusEntitiesAddressNodes>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 address: StakingAddress,
    params?: GetConsensusEntitiesAddressNodesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusEntitiesAddressNodes>>, TError, TData>, request?: SecondParameter<typeof getConsensusEntitiesAddressNodesMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetConsensusEntitiesAddressNodesQueryOptions(address,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a node registered at the consensus layer.
 */
export const getConsensusEntitiesAddressNodesNodeId = (
    address: StakingAddress,
    nodeId: Ed25519PubKey,
 options?: SecondParameter<typeof getConsensusEntitiesAddressNodesNodeIdMutator>,signal?: AbortSignal
) => {
      return getConsensusEntitiesAddressNodesNodeIdMutator<Node>(
      {url: `/consensus/entities/${address}/nodes/${nodeId}`, method: 'get', signal
    },
      options);
    }
  

export const getGetConsensusEntitiesAddressNodesNodeIdQueryKey = (address: StakingAddress,
    nodeId: Ed25519PubKey,) => [`/consensus/entities/${address}/nodes/${nodeId}`] as const;
  

    
export const getGetConsensusEntitiesAddressNodesNodeIdQueryOptions = <TData = Awaited<ReturnType<typeof getConsensusEntitiesAddressNodesNodeId>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(address: StakingAddress,
    nodeId: Ed25519PubKey, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusEntitiesAddressNodesNodeId>>, TError, TData>, request?: SecondParameter<typeof getConsensusEntitiesAddressNodesNodeIdMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getConsensusEntitiesAddressNodesNodeId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConsensusEntitiesAddressNodesNodeIdQueryKey(address,nodeId);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConsensusEntitiesAddressNodesNodeId>>> = ({ signal }) => getConsensusEntitiesAddressNodesNodeId(address,nodeId, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(address && nodeId), ...queryOptions}}

export type GetConsensusEntitiesAddressNodesNodeIdQueryResult = NonNullable<Awaited<ReturnType<typeof getConsensusEntitiesAddressNodesNodeId>>>
export type GetConsensusEntitiesAddressNodesNodeIdQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a node registered at the consensus layer.
 */
export const useGetConsensusEntitiesAddressNodesNodeId = <TData = Awaited<ReturnType<typeof getConsensusEntitiesAddressNodesNodeId>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 address: StakingAddress,
    nodeId: Ed25519PubKey, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusEntitiesAddressNodesNodeId>>, TError, TData>, request?: SecondParameter<typeof getConsensusEntitiesAddressNodesNodeIdMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetConsensusEntitiesAddressNodesNodeIdQueryOptions(address,nodeId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a list of validators registered at the consensus layer (the list includes all registered entities, even those without a currently active validator node).
 */
export const getConsensusValidators = (
    params?: GetConsensusValidatorsParams,
 options?: SecondParameter<typeof getConsensusValidatorsMutator>,signal?: AbortSignal
) => {
      return getConsensusValidatorsMutator<ValidatorList>(
      {url: `/consensus/validators`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetConsensusValidatorsQueryKey = (params?: GetConsensusValidatorsParams,) => [`/consensus/validators`, ...(params ? [params]: [])] as const;
  

    
export const getGetConsensusValidatorsQueryOptions = <TData = Awaited<ReturnType<typeof getConsensusValidators>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(params?: GetConsensusValidatorsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusValidators>>, TError, TData>, request?: SecondParameter<typeof getConsensusValidatorsMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getConsensusValidators>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConsensusValidatorsQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConsensusValidators>>> = ({ signal }) => getConsensusValidators(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetConsensusValidatorsQueryResult = NonNullable<Awaited<ReturnType<typeof getConsensusValidators>>>
export type GetConsensusValidatorsQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a list of validators registered at the consensus layer (the list includes all registered entities, even those without a currently active validator node).
 */
export const useGetConsensusValidators = <TData = Awaited<ReturnType<typeof getConsensusValidators>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 params?: GetConsensusValidatorsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusValidators>>, TError, TData>, request?: SecondParameter<typeof getConsensusValidatorsMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetConsensusValidatorsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a validator registered at the consensus layer.
 */
export const getConsensusValidatorsAddress = (
    address: StakingAddress,
 options?: SecondParameter<typeof getConsensusValidatorsAddressMutator>,signal?: AbortSignal
) => {
      return getConsensusValidatorsAddressMutator<ValidatorList>(
      {url: `/consensus/validators/${address}`, method: 'get', signal
    },
      options);
    }
  

export const getGetConsensusValidatorsAddressQueryKey = (address: StakingAddress,) => [`/consensus/validators/${address}`] as const;
  

    
export const getGetConsensusValidatorsAddressQueryOptions = <TData = Awaited<ReturnType<typeof getConsensusValidatorsAddress>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(address: StakingAddress, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusValidatorsAddress>>, TError, TData>, request?: SecondParameter<typeof getConsensusValidatorsAddressMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getConsensusValidatorsAddress>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConsensusValidatorsAddressQueryKey(address);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConsensusValidatorsAddress>>> = ({ signal }) => getConsensusValidatorsAddress(address, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(address), ...queryOptions}}

export type GetConsensusValidatorsAddressQueryResult = NonNullable<Awaited<ReturnType<typeof getConsensusValidatorsAddress>>>
export type GetConsensusValidatorsAddressQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a validator registered at the consensus layer.
 */
export const useGetConsensusValidatorsAddress = <TData = Awaited<ReturnType<typeof getConsensusValidatorsAddress>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 address: StakingAddress, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusValidatorsAddress>>, TError, TData>, request?: SecondParameter<typeof getConsensusValidatorsAddressMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetConsensusValidatorsAddressQueryOptions(address,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns historical information for a single validator.
 */
export const getConsensusValidatorsAddressHistory = (
    address: StakingAddress,
    params?: GetConsensusValidatorsAddressHistoryParams,
 options?: SecondParameter<typeof getConsensusValidatorsAddressHistoryMutator>,signal?: AbortSignal
) => {
      return getConsensusValidatorsAddressHistoryMutator<ValidatorHistory>(
      {url: `/consensus/validators/${address}/history`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetConsensusValidatorsAddressHistoryQueryKey = (address: StakingAddress,
    params?: GetConsensusValidatorsAddressHistoryParams,) => [`/consensus/validators/${address}/history`, ...(params ? [params]: [])] as const;
  

    
export const getGetConsensusValidatorsAddressHistoryQueryOptions = <TData = Awaited<ReturnType<typeof getConsensusValidatorsAddressHistory>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(address: StakingAddress,
    params?: GetConsensusValidatorsAddressHistoryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusValidatorsAddressHistory>>, TError, TData>, request?: SecondParameter<typeof getConsensusValidatorsAddressHistoryMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getConsensusValidatorsAddressHistory>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConsensusValidatorsAddressHistoryQueryKey(address,params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConsensusValidatorsAddressHistory>>> = ({ signal }) => getConsensusValidatorsAddressHistory(address,params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(address), ...queryOptions}}

export type GetConsensusValidatorsAddressHistoryQueryResult = NonNullable<Awaited<ReturnType<typeof getConsensusValidatorsAddressHistory>>>
export type GetConsensusValidatorsAddressHistoryQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns historical information for a single validator.
 */
export const useGetConsensusValidatorsAddressHistory = <TData = Awaited<ReturnType<typeof getConsensusValidatorsAddressHistory>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 address: StakingAddress,
    params?: GetConsensusValidatorsAddressHistoryParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusValidatorsAddressHistory>>, TError, TData>, request?: SecondParameter<typeof getConsensusValidatorsAddressHistoryMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetConsensusValidatorsAddressHistoryQueryOptions(address,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a list of consensus layer accounts.
Note that for performance reasons, the info returned by this endpoint
may be slightly stale (<2 minutes). For the most up-to-date account state,
query the single-account endpoint.

 */
export const getConsensusAccounts = (
    params?: GetConsensusAccountsParams,
 options?: SecondParameter<typeof getConsensusAccountsMutator>,signal?: AbortSignal
) => {
      return getConsensusAccountsMutator<AccountList>(
      {url: `/consensus/accounts`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetConsensusAccountsQueryKey = (params?: GetConsensusAccountsParams,) => [`/consensus/accounts`, ...(params ? [params]: [])] as const;
  

    
export const getGetConsensusAccountsQueryOptions = <TData = Awaited<ReturnType<typeof getConsensusAccounts>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(params?: GetConsensusAccountsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusAccounts>>, TError, TData>, request?: SecondParameter<typeof getConsensusAccountsMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getConsensusAccounts>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConsensusAccountsQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConsensusAccounts>>> = ({ signal }) => getConsensusAccounts(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetConsensusAccountsQueryResult = NonNullable<Awaited<ReturnType<typeof getConsensusAccounts>>>
export type GetConsensusAccountsQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a list of consensus layer accounts.
Note that for performance reasons, the info returned by this endpoint
may be slightly stale (<2 minutes). For the most up-to-date account state,
query the single-account endpoint.

 */
export const useGetConsensusAccounts = <TData = Awaited<ReturnType<typeof getConsensusAccounts>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 params?: GetConsensusAccountsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusAccounts>>, TError, TData>, request?: SecondParameter<typeof getConsensusAccountsMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetConsensusAccountsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a consensus layer account.
 */
export const getConsensusAccountsAddress = (
    address: StakingAddress,
 options?: SecondParameter<typeof getConsensusAccountsAddressMutator>,signal?: AbortSignal
) => {
      return getConsensusAccountsAddressMutator<Account>(
      {url: `/consensus/accounts/${address}`, method: 'get', signal
    },
      options);
    }
  

export const getGetConsensusAccountsAddressQueryKey = (address: StakingAddress,) => [`/consensus/accounts/${address}`] as const;
  

    
export const getGetConsensusAccountsAddressQueryOptions = <TData = Awaited<ReturnType<typeof getConsensusAccountsAddress>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(address: StakingAddress, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusAccountsAddress>>, TError, TData>, request?: SecondParameter<typeof getConsensusAccountsAddressMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getConsensusAccountsAddress>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConsensusAccountsAddressQueryKey(address);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConsensusAccountsAddress>>> = ({ signal }) => getConsensusAccountsAddress(address, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(address), ...queryOptions}}

export type GetConsensusAccountsAddressQueryResult = NonNullable<Awaited<ReturnType<typeof getConsensusAccountsAddress>>>
export type GetConsensusAccountsAddressQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a consensus layer account.
 */
export const useGetConsensusAccountsAddress = <TData = Awaited<ReturnType<typeof getConsensusAccountsAddress>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 address: StakingAddress, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusAccountsAddress>>, TError, TData>, request?: SecondParameter<typeof getConsensusAccountsAddressMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetConsensusAccountsAddressQueryOptions(address,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns an account's delegations.
 */
export const getConsensusAccountsAddressDelegations = (
    address: StakingAddress,
    params?: GetConsensusAccountsAddressDelegationsParams,
 options?: SecondParameter<typeof getConsensusAccountsAddressDelegationsMutator>,signal?: AbortSignal
) => {
      return getConsensusAccountsAddressDelegationsMutator<DelegationList>(
      {url: `/consensus/accounts/${address}/delegations`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetConsensusAccountsAddressDelegationsQueryKey = (address: StakingAddress,
    params?: GetConsensusAccountsAddressDelegationsParams,) => [`/consensus/accounts/${address}/delegations`, ...(params ? [params]: [])] as const;
  

    
export const getGetConsensusAccountsAddressDelegationsQueryOptions = <TData = Awaited<ReturnType<typeof getConsensusAccountsAddressDelegations>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(address: StakingAddress,
    params?: GetConsensusAccountsAddressDelegationsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusAccountsAddressDelegations>>, TError, TData>, request?: SecondParameter<typeof getConsensusAccountsAddressDelegationsMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getConsensusAccountsAddressDelegations>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConsensusAccountsAddressDelegationsQueryKey(address,params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConsensusAccountsAddressDelegations>>> = ({ signal }) => getConsensusAccountsAddressDelegations(address,params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(address), ...queryOptions}}

export type GetConsensusAccountsAddressDelegationsQueryResult = NonNullable<Awaited<ReturnType<typeof getConsensusAccountsAddressDelegations>>>
export type GetConsensusAccountsAddressDelegationsQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns an account's delegations.
 */
export const useGetConsensusAccountsAddressDelegations = <TData = Awaited<ReturnType<typeof getConsensusAccountsAddressDelegations>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 address: StakingAddress,
    params?: GetConsensusAccountsAddressDelegationsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusAccountsAddressDelegations>>, TError, TData>, request?: SecondParameter<typeof getConsensusAccountsAddressDelegationsMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetConsensusAccountsAddressDelegationsQueryOptions(address,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a list of delegations to an account.
 */
export const getConsensusAccountsAddressDelegationsTo = (
    address: StakingAddress,
    params?: GetConsensusAccountsAddressDelegationsToParams,
 options?: SecondParameter<typeof getConsensusAccountsAddressDelegationsToMutator>,signal?: AbortSignal
) => {
      return getConsensusAccountsAddressDelegationsToMutator<DelegationList>(
      {url: `/consensus/accounts/${address}/delegations_to`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetConsensusAccountsAddressDelegationsToQueryKey = (address: StakingAddress,
    params?: GetConsensusAccountsAddressDelegationsToParams,) => [`/consensus/accounts/${address}/delegations_to`, ...(params ? [params]: [])] as const;
  

    
export const getGetConsensusAccountsAddressDelegationsToQueryOptions = <TData = Awaited<ReturnType<typeof getConsensusAccountsAddressDelegationsTo>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(address: StakingAddress,
    params?: GetConsensusAccountsAddressDelegationsToParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusAccountsAddressDelegationsTo>>, TError, TData>, request?: SecondParameter<typeof getConsensusAccountsAddressDelegationsToMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getConsensusAccountsAddressDelegationsTo>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConsensusAccountsAddressDelegationsToQueryKey(address,params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConsensusAccountsAddressDelegationsTo>>> = ({ signal }) => getConsensusAccountsAddressDelegationsTo(address,params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(address), ...queryOptions}}

export type GetConsensusAccountsAddressDelegationsToQueryResult = NonNullable<Awaited<ReturnType<typeof getConsensusAccountsAddressDelegationsTo>>>
export type GetConsensusAccountsAddressDelegationsToQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a list of delegations to an account.
 */
export const useGetConsensusAccountsAddressDelegationsTo = <TData = Awaited<ReturnType<typeof getConsensusAccountsAddressDelegationsTo>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 address: StakingAddress,
    params?: GetConsensusAccountsAddressDelegationsToParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusAccountsAddressDelegationsTo>>, TError, TData>, request?: SecondParameter<typeof getConsensusAccountsAddressDelegationsToMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetConsensusAccountsAddressDelegationsToQueryOptions(address,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns an account's debonding delegations.
 */
export const getConsensusAccountsAddressDebondingDelegations = (
    address: StakingAddress,
    params?: GetConsensusAccountsAddressDebondingDelegationsParams,
 options?: SecondParameter<typeof getConsensusAccountsAddressDebondingDelegationsMutator>,signal?: AbortSignal
) => {
      return getConsensusAccountsAddressDebondingDelegationsMutator<DebondingDelegationList>(
      {url: `/consensus/accounts/${address}/debonding_delegations`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetConsensusAccountsAddressDebondingDelegationsQueryKey = (address: StakingAddress,
    params?: GetConsensusAccountsAddressDebondingDelegationsParams,) => [`/consensus/accounts/${address}/debonding_delegations`, ...(params ? [params]: [])] as const;
  

    
export const getGetConsensusAccountsAddressDebondingDelegationsQueryOptions = <TData = Awaited<ReturnType<typeof getConsensusAccountsAddressDebondingDelegations>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(address: StakingAddress,
    params?: GetConsensusAccountsAddressDebondingDelegationsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusAccountsAddressDebondingDelegations>>, TError, TData>, request?: SecondParameter<typeof getConsensusAccountsAddressDebondingDelegationsMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getConsensusAccountsAddressDebondingDelegations>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConsensusAccountsAddressDebondingDelegationsQueryKey(address,params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConsensusAccountsAddressDebondingDelegations>>> = ({ signal }) => getConsensusAccountsAddressDebondingDelegations(address,params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(address), ...queryOptions}}

export type GetConsensusAccountsAddressDebondingDelegationsQueryResult = NonNullable<Awaited<ReturnType<typeof getConsensusAccountsAddressDebondingDelegations>>>
export type GetConsensusAccountsAddressDebondingDelegationsQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns an account's debonding delegations.
 */
export const useGetConsensusAccountsAddressDebondingDelegations = <TData = Awaited<ReturnType<typeof getConsensusAccountsAddressDebondingDelegations>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 address: StakingAddress,
    params?: GetConsensusAccountsAddressDebondingDelegationsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusAccountsAddressDebondingDelegations>>, TError, TData>, request?: SecondParameter<typeof getConsensusAccountsAddressDebondingDelegationsMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetConsensusAccountsAddressDebondingDelegationsQueryOptions(address,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a list of debonding delegations to an account.
 */
export const getConsensusAccountsAddressDebondingDelegationsTo = (
    address: StakingAddress,
    params?: GetConsensusAccountsAddressDebondingDelegationsToParams,
 options?: SecondParameter<typeof getConsensusAccountsAddressDebondingDelegationsToMutator>,signal?: AbortSignal
) => {
      return getConsensusAccountsAddressDebondingDelegationsToMutator<DebondingDelegationList>(
      {url: `/consensus/accounts/${address}/debonding_delegations_to`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetConsensusAccountsAddressDebondingDelegationsToQueryKey = (address: StakingAddress,
    params?: GetConsensusAccountsAddressDebondingDelegationsToParams,) => [`/consensus/accounts/${address}/debonding_delegations_to`, ...(params ? [params]: [])] as const;
  

    
export const getGetConsensusAccountsAddressDebondingDelegationsToQueryOptions = <TData = Awaited<ReturnType<typeof getConsensusAccountsAddressDebondingDelegationsTo>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(address: StakingAddress,
    params?: GetConsensusAccountsAddressDebondingDelegationsToParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusAccountsAddressDebondingDelegationsTo>>, TError, TData>, request?: SecondParameter<typeof getConsensusAccountsAddressDebondingDelegationsToMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getConsensusAccountsAddressDebondingDelegationsTo>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConsensusAccountsAddressDebondingDelegationsToQueryKey(address,params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConsensusAccountsAddressDebondingDelegationsTo>>> = ({ signal }) => getConsensusAccountsAddressDebondingDelegationsTo(address,params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(address), ...queryOptions}}

export type GetConsensusAccountsAddressDebondingDelegationsToQueryResult = NonNullable<Awaited<ReturnType<typeof getConsensusAccountsAddressDebondingDelegationsTo>>>
export type GetConsensusAccountsAddressDebondingDelegationsToQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a list of debonding delegations to an account.
 */
export const useGetConsensusAccountsAddressDebondingDelegationsTo = <TData = Awaited<ReturnType<typeof getConsensusAccountsAddressDebondingDelegationsTo>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 address: StakingAddress,
    params?: GetConsensusAccountsAddressDebondingDelegationsToParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusAccountsAddressDebondingDelegationsTo>>, TError, TData>, request?: SecondParameter<typeof getConsensusAccountsAddressDebondingDelegationsToMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetConsensusAccountsAddressDebondingDelegationsToQueryOptions(address,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a list of consensus epochs.
 */
export const getConsensusEpochs = (
    params?: GetConsensusEpochsParams,
 options?: SecondParameter<typeof getConsensusEpochsMutator>,signal?: AbortSignal
) => {
      return getConsensusEpochsMutator<EpochList>(
      {url: `/consensus/epochs`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetConsensusEpochsQueryKey = (params?: GetConsensusEpochsParams,) => [`/consensus/epochs`, ...(params ? [params]: [])] as const;
  

    
export const getGetConsensusEpochsQueryOptions = <TData = Awaited<ReturnType<typeof getConsensusEpochs>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(params?: GetConsensusEpochsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusEpochs>>, TError, TData>, request?: SecondParameter<typeof getConsensusEpochsMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getConsensusEpochs>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConsensusEpochsQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConsensusEpochs>>> = ({ signal }) => getConsensusEpochs(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetConsensusEpochsQueryResult = NonNullable<Awaited<ReturnType<typeof getConsensusEpochs>>>
export type GetConsensusEpochsQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a list of consensus epochs.
 */
export const useGetConsensusEpochs = <TData = Awaited<ReturnType<typeof getConsensusEpochs>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 params?: GetConsensusEpochsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusEpochs>>, TError, TData>, request?: SecondParameter<typeof getConsensusEpochsMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetConsensusEpochsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a consensus epoch.
 */
export const getConsensusEpochsEpoch = (
    epoch: number,
 options?: SecondParameter<typeof getConsensusEpochsEpochMutator>,signal?: AbortSignal
) => {
      return getConsensusEpochsEpochMutator<Epoch>(
      {url: `/consensus/epochs/${epoch}`, method: 'get', signal
    },
      options);
    }
  

export const getGetConsensusEpochsEpochQueryKey = (epoch: number,) => [`/consensus/epochs/${epoch}`] as const;
  

    
export const getGetConsensusEpochsEpochQueryOptions = <TData = Awaited<ReturnType<typeof getConsensusEpochsEpoch>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(epoch: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusEpochsEpoch>>, TError, TData>, request?: SecondParameter<typeof getConsensusEpochsEpochMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getConsensusEpochsEpoch>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConsensusEpochsEpochQueryKey(epoch);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConsensusEpochsEpoch>>> = ({ signal }) => getConsensusEpochsEpoch(epoch, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(epoch), ...queryOptions}}

export type GetConsensusEpochsEpochQueryResult = NonNullable<Awaited<ReturnType<typeof getConsensusEpochsEpoch>>>
export type GetConsensusEpochsEpochQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a consensus epoch.
 */
export const useGetConsensusEpochsEpoch = <TData = Awaited<ReturnType<typeof getConsensusEpochsEpoch>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 epoch: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusEpochsEpoch>>, TError, TData>, request?: SecondParameter<typeof getConsensusEpochsEpochMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetConsensusEpochsEpochQueryOptions(epoch,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a list of governance proposals.
 */
export const getConsensusProposals = (
    params?: GetConsensusProposalsParams,
 options?: SecondParameter<typeof getConsensusProposalsMutator>,signal?: AbortSignal
) => {
      return getConsensusProposalsMutator<ProposalList>(
      {url: `/consensus/proposals`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetConsensusProposalsQueryKey = (params?: GetConsensusProposalsParams,) => [`/consensus/proposals`, ...(params ? [params]: [])] as const;
  

    
export const getGetConsensusProposalsQueryOptions = <TData = Awaited<ReturnType<typeof getConsensusProposals>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(params?: GetConsensusProposalsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusProposals>>, TError, TData>, request?: SecondParameter<typeof getConsensusProposalsMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getConsensusProposals>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConsensusProposalsQueryKey(params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConsensusProposals>>> = ({ signal }) => getConsensusProposals(params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, ...queryOptions}}

export type GetConsensusProposalsQueryResult = NonNullable<Awaited<ReturnType<typeof getConsensusProposals>>>
export type GetConsensusProposalsQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a list of governance proposals.
 */
export const useGetConsensusProposals = <TData = Awaited<ReturnType<typeof getConsensusProposals>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 params?: GetConsensusProposalsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusProposals>>, TError, TData>, request?: SecondParameter<typeof getConsensusProposalsMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetConsensusProposalsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a governance proposal.
 */
export const getConsensusProposalsProposalId = (
    proposalId: number,
 options?: SecondParameter<typeof getConsensusProposalsProposalIdMutator>,signal?: AbortSignal
) => {
      return getConsensusProposalsProposalIdMutator<Proposal>(
      {url: `/consensus/proposals/${proposalId}`, method: 'get', signal
    },
      options);
    }
  

export const getGetConsensusProposalsProposalIdQueryKey = (proposalId: number,) => [`/consensus/proposals/${proposalId}`] as const;
  

    
export const getGetConsensusProposalsProposalIdQueryOptions = <TData = Awaited<ReturnType<typeof getConsensusProposalsProposalId>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(proposalId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusProposalsProposalId>>, TError, TData>, request?: SecondParameter<typeof getConsensusProposalsProposalIdMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getConsensusProposalsProposalId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConsensusProposalsProposalIdQueryKey(proposalId);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConsensusProposalsProposalId>>> = ({ signal }) => getConsensusProposalsProposalId(proposalId, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(proposalId), ...queryOptions}}

export type GetConsensusProposalsProposalIdQueryResult = NonNullable<Awaited<ReturnType<typeof getConsensusProposalsProposalId>>>
export type GetConsensusProposalsProposalIdQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a governance proposal.
 */
export const useGetConsensusProposalsProposalId = <TData = Awaited<ReturnType<typeof getConsensusProposalsProposalId>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 proposalId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusProposalsProposalId>>, TError, TData>, request?: SecondParameter<typeof getConsensusProposalsProposalIdMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetConsensusProposalsProposalIdQueryOptions(proposalId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a list of votes for a governance proposal.
 */
export const getConsensusProposalsProposalIdVotes = (
    proposalId: number,
    params?: GetConsensusProposalsProposalIdVotesParams,
 options?: SecondParameter<typeof getConsensusProposalsProposalIdVotesMutator>,signal?: AbortSignal
) => {
      return getConsensusProposalsProposalIdVotesMutator<ProposalVotes>(
      {url: `/consensus/proposals/${proposalId}/votes`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetConsensusProposalsProposalIdVotesQueryKey = (proposalId: number,
    params?: GetConsensusProposalsProposalIdVotesParams,) => [`/consensus/proposals/${proposalId}/votes`, ...(params ? [params]: [])] as const;
  

    
export const getGetConsensusProposalsProposalIdVotesQueryOptions = <TData = Awaited<ReturnType<typeof getConsensusProposalsProposalIdVotes>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(proposalId: number,
    params?: GetConsensusProposalsProposalIdVotesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusProposalsProposalIdVotes>>, TError, TData>, request?: SecondParameter<typeof getConsensusProposalsProposalIdVotesMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getConsensusProposalsProposalIdVotes>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetConsensusProposalsProposalIdVotesQueryKey(proposalId,params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getConsensusProposalsProposalIdVotes>>> = ({ signal }) => getConsensusProposalsProposalIdVotes(proposalId,params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(proposalId), ...queryOptions}}

export type GetConsensusProposalsProposalIdVotesQueryResult = NonNullable<Awaited<ReturnType<typeof getConsensusProposalsProposalIdVotes>>>
export type GetConsensusProposalsProposalIdVotesQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a list of votes for a governance proposal.
 */
export const useGetConsensusProposalsProposalIdVotes = <TData = Awaited<ReturnType<typeof getConsensusProposalsProposalIdVotes>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 proposalId: number,
    params?: GetConsensusProposalsProposalIdVotesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getConsensusProposalsProposalIdVotes>>, TError, TData>, request?: SecondParameter<typeof getConsensusProposalsProposalIdVotesMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetConsensusProposalsProposalIdVotesQueryOptions(proposalId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a list of Runtime blocks.
 */
export const getRuntimeBlocks = (
    runtime: Runtime,
    params?: GetRuntimeBlocksParams,
 options?: SecondParameter<typeof getRuntimeBlocksMutator>,signal?: AbortSignal
) => {
      return getRuntimeBlocksMutator<RuntimeBlockList>(
      {url: `/${runtime}/blocks`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetRuntimeBlocksQueryKey = (runtime: Runtime,
    params?: GetRuntimeBlocksParams,) => [`/${runtime}/blocks`, ...(params ? [params]: [])] as const;
  

    
export const getGetRuntimeBlocksQueryOptions = <TData = Awaited<ReturnType<typeof getRuntimeBlocks>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(runtime: Runtime,
    params?: GetRuntimeBlocksParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeBlocks>>, TError, TData>, request?: SecondParameter<typeof getRuntimeBlocksMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getRuntimeBlocks>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRuntimeBlocksQueryKey(runtime,params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRuntimeBlocks>>> = ({ signal }) => getRuntimeBlocks(runtime,params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(runtime), ...queryOptions}}

export type GetRuntimeBlocksQueryResult = NonNullable<Awaited<ReturnType<typeof getRuntimeBlocks>>>
export type GetRuntimeBlocksQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a list of Runtime blocks.
 */
export const useGetRuntimeBlocks = <TData = Awaited<ReturnType<typeof getRuntimeBlocks>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 runtime: Runtime,
    params?: GetRuntimeBlocksParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeBlocks>>, TError, TData>, request?: SecondParameter<typeof getRuntimeBlocksMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRuntimeBlocksQueryOptions(runtime,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a list of Runtime transactions.
 */
export const getRuntimeTransactions = (
    runtime: Runtime,
    params?: GetRuntimeTransactionsParams,
 options?: SecondParameter<typeof getRuntimeTransactionsMutator>,signal?: AbortSignal
) => {
      return getRuntimeTransactionsMutator<RuntimeTransactionList>(
      {url: `/${runtime}/transactions`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetRuntimeTransactionsQueryKey = (runtime: Runtime,
    params?: GetRuntimeTransactionsParams,) => [`/${runtime}/transactions`, ...(params ? [params]: [])] as const;
  

    
export const getGetRuntimeTransactionsQueryOptions = <TData = Awaited<ReturnType<typeof getRuntimeTransactions>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(runtime: Runtime,
    params?: GetRuntimeTransactionsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeTransactions>>, TError, TData>, request?: SecondParameter<typeof getRuntimeTransactionsMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getRuntimeTransactions>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRuntimeTransactionsQueryKey(runtime,params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRuntimeTransactions>>> = ({ signal }) => getRuntimeTransactions(runtime,params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(runtime), ...queryOptions}}

export type GetRuntimeTransactionsQueryResult = NonNullable<Awaited<ReturnType<typeof getRuntimeTransactions>>>
export type GetRuntimeTransactionsQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a list of Runtime transactions.
 */
export const useGetRuntimeTransactions = <TData = Awaited<ReturnType<typeof getRuntimeTransactions>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 runtime: Runtime,
    params?: GetRuntimeTransactionsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeTransactions>>, TError, TData>, request?: SecondParameter<typeof getRuntimeTransactionsMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRuntimeTransactionsQueryOptions(runtime,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns runtime transactions with the given transaction hash.
 */
export const getRuntimeTransactionsTxHash = (
    runtime: Runtime,
    txHash: string,
 options?: SecondParameter<typeof getRuntimeTransactionsTxHashMutator>,signal?: AbortSignal
) => {
      return getRuntimeTransactionsTxHashMutator<RuntimeTransactionList>(
      {url: `/${runtime}/transactions/${txHash}`, method: 'get', signal
    },
      options);
    }
  

export const getGetRuntimeTransactionsTxHashQueryKey = (runtime: Runtime,
    txHash: string,) => [`/${runtime}/transactions/${txHash}`] as const;
  

    
export const getGetRuntimeTransactionsTxHashQueryOptions = <TData = Awaited<ReturnType<typeof getRuntimeTransactionsTxHash>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(runtime: Runtime,
    txHash: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeTransactionsTxHash>>, TError, TData>, request?: SecondParameter<typeof getRuntimeTransactionsTxHashMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getRuntimeTransactionsTxHash>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRuntimeTransactionsTxHashQueryKey(runtime,txHash);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRuntimeTransactionsTxHash>>> = ({ signal }) => getRuntimeTransactionsTxHash(runtime,txHash, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(runtime && txHash), ...queryOptions}}

export type GetRuntimeTransactionsTxHashQueryResult = NonNullable<Awaited<ReturnType<typeof getRuntimeTransactionsTxHash>>>
export type GetRuntimeTransactionsTxHashQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns runtime transactions with the given transaction hash.
 */
export const useGetRuntimeTransactionsTxHash = <TData = Awaited<ReturnType<typeof getRuntimeTransactionsTxHash>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 runtime: Runtime,
    txHash: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeTransactionsTxHash>>, TError, TData>, request?: SecondParameter<typeof getRuntimeTransactionsTxHashMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRuntimeTransactionsTxHashQueryOptions(runtime,txHash,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a list of runtime events.
 */
export const getRuntimeEvents = (
    runtime: Runtime,
    params?: GetRuntimeEventsParams,
 options?: SecondParameter<typeof getRuntimeEventsMutator>,signal?: AbortSignal
) => {
      return getRuntimeEventsMutator<RuntimeEventList>(
      {url: `/${runtime}/events`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetRuntimeEventsQueryKey = (runtime: Runtime,
    params?: GetRuntimeEventsParams,) => [`/${runtime}/events`, ...(params ? [params]: [])] as const;
  

    
export const getGetRuntimeEventsQueryOptions = <TData = Awaited<ReturnType<typeof getRuntimeEvents>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(runtime: Runtime,
    params?: GetRuntimeEventsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeEvents>>, TError, TData>, request?: SecondParameter<typeof getRuntimeEventsMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getRuntimeEvents>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRuntimeEventsQueryKey(runtime,params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRuntimeEvents>>> = ({ signal }) => getRuntimeEvents(runtime,params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(runtime), ...queryOptions}}

export type GetRuntimeEventsQueryResult = NonNullable<Awaited<ReturnType<typeof getRuntimeEvents>>>
export type GetRuntimeEventsQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a list of runtime events.
 */
export const useGetRuntimeEvents = <TData = Awaited<ReturnType<typeof getRuntimeEvents>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 runtime: Runtime,
    params?: GetRuntimeEventsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeEvents>>, TError, TData>, request?: SecondParameter<typeof getRuntimeEventsMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRuntimeEventsQueryOptions(runtime,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a list of EVM (ERC-20, ...) tokens on the runtime.
 */
export const getRuntimeEvmTokens = (
    runtime: Runtime,
    params?: GetRuntimeEvmTokensParams,
 options?: SecondParameter<typeof getRuntimeEvmTokensMutator>,signal?: AbortSignal
) => {
      return getRuntimeEvmTokensMutator<EvmTokenList>(
      {url: `/${runtime}/evm_tokens`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetRuntimeEvmTokensQueryKey = (runtime: Runtime,
    params?: GetRuntimeEvmTokensParams,) => [`/${runtime}/evm_tokens`, ...(params ? [params]: [])] as const;
  

    
export const getGetRuntimeEvmTokensQueryOptions = <TData = Awaited<ReturnType<typeof getRuntimeEvmTokens>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(runtime: Runtime,
    params?: GetRuntimeEvmTokensParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeEvmTokens>>, TError, TData>, request?: SecondParameter<typeof getRuntimeEvmTokensMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getRuntimeEvmTokens>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRuntimeEvmTokensQueryKey(runtime,params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRuntimeEvmTokens>>> = ({ signal }) => getRuntimeEvmTokens(runtime,params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(runtime), ...queryOptions}}

export type GetRuntimeEvmTokensQueryResult = NonNullable<Awaited<ReturnType<typeof getRuntimeEvmTokens>>>
export type GetRuntimeEvmTokensQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a list of EVM (ERC-20, ...) tokens on the runtime.
 */
export const useGetRuntimeEvmTokens = <TData = Awaited<ReturnType<typeof getRuntimeEvmTokens>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 runtime: Runtime,
    params?: GetRuntimeEvmTokensParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeEvmTokens>>, TError, TData>, request?: SecondParameter<typeof getRuntimeEvmTokensMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRuntimeEvmTokensQueryOptions(runtime,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns info on an EVM (ERC-20, ...) token on the runtime.
 */
export const getRuntimeEvmTokensAddress = (
    runtime: Runtime,
    address: EthOrOasisAddress,
 options?: SecondParameter<typeof getRuntimeEvmTokensAddressMutator>,signal?: AbortSignal
) => {
      return getRuntimeEvmTokensAddressMutator<EvmToken>(
      {url: `/${runtime}/evm_tokens/${address}`, method: 'get', signal
    },
      options);
    }
  

export const getGetRuntimeEvmTokensAddressQueryKey = (runtime: Runtime,
    address: EthOrOasisAddress,) => [`/${runtime}/evm_tokens/${address}`] as const;
  

    
export const getGetRuntimeEvmTokensAddressQueryOptions = <TData = Awaited<ReturnType<typeof getRuntimeEvmTokensAddress>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(runtime: Runtime,
    address: EthOrOasisAddress, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeEvmTokensAddress>>, TError, TData>, request?: SecondParameter<typeof getRuntimeEvmTokensAddressMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getRuntimeEvmTokensAddress>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRuntimeEvmTokensAddressQueryKey(runtime,address);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRuntimeEvmTokensAddress>>> = ({ signal }) => getRuntimeEvmTokensAddress(runtime,address, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(runtime && address), ...queryOptions}}

export type GetRuntimeEvmTokensAddressQueryResult = NonNullable<Awaited<ReturnType<typeof getRuntimeEvmTokensAddress>>>
export type GetRuntimeEvmTokensAddressQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns info on an EVM (ERC-20, ...) token on the runtime.
 */
export const useGetRuntimeEvmTokensAddress = <TData = Awaited<ReturnType<typeof getRuntimeEvmTokensAddress>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 runtime: Runtime,
    address: EthOrOasisAddress, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeEvmTokensAddress>>, TError, TData>, request?: SecondParameter<typeof getRuntimeEvmTokensAddressMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRuntimeEvmTokensAddressQueryOptions(runtime,address,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns the list of holders of an EVM (ERC-20, ...) token.
This endpoint does not verify that `address` is actually an EVM token; if it is not, it will simply return an empty list.

 */
export const getRuntimeEvmTokensAddressHolders = (
    runtime: Runtime,
    address: EthOrOasisAddress,
    params?: GetRuntimeEvmTokensAddressHoldersParams,
 options?: SecondParameter<typeof getRuntimeEvmTokensAddressHoldersMutator>,signal?: AbortSignal
) => {
      return getRuntimeEvmTokensAddressHoldersMutator<TokenHolderList>(
      {url: `/${runtime}/evm_tokens/${address}/holders`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetRuntimeEvmTokensAddressHoldersQueryKey = (runtime: Runtime,
    address: EthOrOasisAddress,
    params?: GetRuntimeEvmTokensAddressHoldersParams,) => [`/${runtime}/evm_tokens/${address}/holders`, ...(params ? [params]: [])] as const;
  

    
export const getGetRuntimeEvmTokensAddressHoldersQueryOptions = <TData = Awaited<ReturnType<typeof getRuntimeEvmTokensAddressHolders>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(runtime: Runtime,
    address: EthOrOasisAddress,
    params?: GetRuntimeEvmTokensAddressHoldersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeEvmTokensAddressHolders>>, TError, TData>, request?: SecondParameter<typeof getRuntimeEvmTokensAddressHoldersMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getRuntimeEvmTokensAddressHolders>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRuntimeEvmTokensAddressHoldersQueryKey(runtime,address,params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRuntimeEvmTokensAddressHolders>>> = ({ signal }) => getRuntimeEvmTokensAddressHolders(runtime,address,params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(runtime && address), ...queryOptions}}

export type GetRuntimeEvmTokensAddressHoldersQueryResult = NonNullable<Awaited<ReturnType<typeof getRuntimeEvmTokensAddressHolders>>>
export type GetRuntimeEvmTokensAddressHoldersQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns the list of holders of an EVM (ERC-20, ...) token.
This endpoint does not verify that `address` is actually an EVM token; if it is not, it will simply return an empty list.

 */
export const useGetRuntimeEvmTokensAddressHolders = <TData = Awaited<ReturnType<typeof getRuntimeEvmTokensAddressHolders>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 runtime: Runtime,
    address: EthOrOasisAddress,
    params?: GetRuntimeEvmTokensAddressHoldersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeEvmTokensAddressHolders>>, TError, TData>, request?: SecondParameter<typeof getRuntimeEvmTokensAddressHoldersMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRuntimeEvmTokensAddressHoldersQueryOptions(runtime,address,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns the list of non-fungible token (NFT) instances of an EVM (ERC-721, ...) token.
This endpoint does not verify that `address` is actually an EVM token; if it is not, it will simply return an empty list.

 */
export const getRuntimeEvmTokensAddressNfts = (
    runtime: Runtime,
    address: EthOrOasisAddress,
    params?: GetRuntimeEvmTokensAddressNftsParams,
 options?: SecondParameter<typeof getRuntimeEvmTokensAddressNftsMutator>,signal?: AbortSignal
) => {
      return getRuntimeEvmTokensAddressNftsMutator<EvmNftList>(
      {url: `/${runtime}/evm_tokens/${address}/nfts`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetRuntimeEvmTokensAddressNftsQueryKey = (runtime: Runtime,
    address: EthOrOasisAddress,
    params?: GetRuntimeEvmTokensAddressNftsParams,) => [`/${runtime}/evm_tokens/${address}/nfts`, ...(params ? [params]: [])] as const;
  

    
export const getGetRuntimeEvmTokensAddressNftsQueryOptions = <TData = Awaited<ReturnType<typeof getRuntimeEvmTokensAddressNfts>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(runtime: Runtime,
    address: EthOrOasisAddress,
    params?: GetRuntimeEvmTokensAddressNftsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeEvmTokensAddressNfts>>, TError, TData>, request?: SecondParameter<typeof getRuntimeEvmTokensAddressNftsMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getRuntimeEvmTokensAddressNfts>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRuntimeEvmTokensAddressNftsQueryKey(runtime,address,params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRuntimeEvmTokensAddressNfts>>> = ({ signal }) => getRuntimeEvmTokensAddressNfts(runtime,address,params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(runtime && address), ...queryOptions}}

export type GetRuntimeEvmTokensAddressNftsQueryResult = NonNullable<Awaited<ReturnType<typeof getRuntimeEvmTokensAddressNfts>>>
export type GetRuntimeEvmTokensAddressNftsQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns the list of non-fungible token (NFT) instances of an EVM (ERC-721, ...) token.
This endpoint does not verify that `address` is actually an EVM token; if it is not, it will simply return an empty list.

 */
export const useGetRuntimeEvmTokensAddressNfts = <TData = Awaited<ReturnType<typeof getRuntimeEvmTokensAddressNfts>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 runtime: Runtime,
    address: EthOrOasisAddress,
    params?: GetRuntimeEvmTokensAddressNftsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeEvmTokensAddressNfts>>, TError, TData>, request?: SecondParameter<typeof getRuntimeEvmTokensAddressNftsMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRuntimeEvmTokensAddressNftsQueryOptions(runtime,address,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns the non-fungible token (NFT) instance of an EVM (ERC-721, ...) token.

 */
export const getRuntimeEvmTokensAddressNftsId = (
    runtime: Runtime,
    address: EthOrOasisAddress,
    id: TextBigInt,
 options?: SecondParameter<typeof getRuntimeEvmTokensAddressNftsIdMutator>,signal?: AbortSignal
) => {
      return getRuntimeEvmTokensAddressNftsIdMutator<EvmNft>(
      {url: `/${runtime}/evm_tokens/${address}/nfts/${id}`, method: 'get', signal
    },
      options);
    }
  

export const getGetRuntimeEvmTokensAddressNftsIdQueryKey = (runtime: Runtime,
    address: EthOrOasisAddress,
    id: TextBigInt,) => [`/${runtime}/evm_tokens/${address}/nfts/${id}`] as const;
  

    
export const getGetRuntimeEvmTokensAddressNftsIdQueryOptions = <TData = Awaited<ReturnType<typeof getRuntimeEvmTokensAddressNftsId>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(runtime: Runtime,
    address: EthOrOasisAddress,
    id: TextBigInt, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeEvmTokensAddressNftsId>>, TError, TData>, request?: SecondParameter<typeof getRuntimeEvmTokensAddressNftsIdMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getRuntimeEvmTokensAddressNftsId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRuntimeEvmTokensAddressNftsIdQueryKey(runtime,address,id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRuntimeEvmTokensAddressNftsId>>> = ({ signal }) => getRuntimeEvmTokensAddressNftsId(runtime,address,id, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(runtime && address && id), ...queryOptions}}

export type GetRuntimeEvmTokensAddressNftsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getRuntimeEvmTokensAddressNftsId>>>
export type GetRuntimeEvmTokensAddressNftsIdQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns the non-fungible token (NFT) instance of an EVM (ERC-721, ...) token.

 */
export const useGetRuntimeEvmTokensAddressNftsId = <TData = Awaited<ReturnType<typeof getRuntimeEvmTokensAddressNftsId>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 runtime: Runtime,
    address: EthOrOasisAddress,
    id: TextBigInt, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeEvmTokensAddressNftsId>>, TError, TData>, request?: SecondParameter<typeof getRuntimeEvmTokensAddressNftsIdMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRuntimeEvmTokensAddressNftsIdQueryOptions(runtime,address,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a runtime account.
 */
export const getRuntimeAccountsAddress = (
    runtime: Runtime,
    address: EthOrOasisAddress,
 options?: SecondParameter<typeof getRuntimeAccountsAddressMutator>,signal?: AbortSignal
) => {
      return getRuntimeAccountsAddressMutator<RuntimeAccount>(
      {url: `/${runtime}/accounts/${address}`, method: 'get', signal
    },
      options);
    }
  

export const getGetRuntimeAccountsAddressQueryKey = (runtime: Runtime,
    address: EthOrOasisAddress,) => [`/${runtime}/accounts/${address}`] as const;
  

    
export const getGetRuntimeAccountsAddressQueryOptions = <TData = Awaited<ReturnType<typeof getRuntimeAccountsAddress>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(runtime: Runtime,
    address: EthOrOasisAddress, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeAccountsAddress>>, TError, TData>, request?: SecondParameter<typeof getRuntimeAccountsAddressMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getRuntimeAccountsAddress>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRuntimeAccountsAddressQueryKey(runtime,address);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRuntimeAccountsAddress>>> = ({ signal }) => getRuntimeAccountsAddress(runtime,address, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(runtime && address), ...queryOptions}}

export type GetRuntimeAccountsAddressQueryResult = NonNullable<Awaited<ReturnType<typeof getRuntimeAccountsAddress>>>
export type GetRuntimeAccountsAddressQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a runtime account.
 */
export const useGetRuntimeAccountsAddress = <TData = Awaited<ReturnType<typeof getRuntimeAccountsAddress>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 runtime: Runtime,
    address: EthOrOasisAddress, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeAccountsAddress>>, TError, TData>, request?: SecondParameter<typeof getRuntimeAccountsAddressMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRuntimeAccountsAddressQueryOptions(runtime,address,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns the list of non-fungible token (NFT) instances owned by an account.

 */
export const getRuntimeAccountsAddressNfts = (
    runtime: Runtime,
    address: EthOrOasisAddress,
    params?: GetRuntimeAccountsAddressNftsParams,
 options?: SecondParameter<typeof getRuntimeAccountsAddressNftsMutator>,signal?: AbortSignal
) => {
      return getRuntimeAccountsAddressNftsMutator<EvmNftList>(
      {url: `/${runtime}/accounts/${address}/nfts`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetRuntimeAccountsAddressNftsQueryKey = (runtime: Runtime,
    address: EthOrOasisAddress,
    params?: GetRuntimeAccountsAddressNftsParams,) => [`/${runtime}/accounts/${address}/nfts`, ...(params ? [params]: [])] as const;
  

    
export const getGetRuntimeAccountsAddressNftsQueryOptions = <TData = Awaited<ReturnType<typeof getRuntimeAccountsAddressNfts>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(runtime: Runtime,
    address: EthOrOasisAddress,
    params?: GetRuntimeAccountsAddressNftsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeAccountsAddressNfts>>, TError, TData>, request?: SecondParameter<typeof getRuntimeAccountsAddressNftsMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getRuntimeAccountsAddressNfts>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRuntimeAccountsAddressNftsQueryKey(runtime,address,params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRuntimeAccountsAddressNfts>>> = ({ signal }) => getRuntimeAccountsAddressNfts(runtime,address,params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(runtime && address), ...queryOptions}}

export type GetRuntimeAccountsAddressNftsQueryResult = NonNullable<Awaited<ReturnType<typeof getRuntimeAccountsAddressNfts>>>
export type GetRuntimeAccountsAddressNftsQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns the list of non-fungible token (NFT) instances owned by an account.

 */
export const useGetRuntimeAccountsAddressNfts = <TData = Awaited<ReturnType<typeof getRuntimeAccountsAddressNfts>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 runtime: Runtime,
    address: EthOrOasisAddress,
    params?: GetRuntimeAccountsAddressNftsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeAccountsAddressNfts>>, TError, TData>, request?: SecondParameter<typeof getRuntimeAccountsAddressNftsMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRuntimeAccountsAddressNftsQueryOptions(runtime,address,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns the runtime status.
 */
export const getRuntimeStatus = (
    runtime: Runtime,
 options?: SecondParameter<typeof getRuntimeStatusMutator>,signal?: AbortSignal
) => {
      return getRuntimeStatusMutator<RuntimeStatus>(
      {url: `/${runtime}/status`, method: 'get', signal
    },
      options);
    }
  

export const getGetRuntimeStatusQueryKey = (runtime: Runtime,) => [`/${runtime}/status`] as const;
  

    
export const getGetRuntimeStatusQueryOptions = <TData = Awaited<ReturnType<typeof getRuntimeStatus>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(runtime: Runtime, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeStatus>>, TError, TData>, request?: SecondParameter<typeof getRuntimeStatusMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getRuntimeStatus>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRuntimeStatusQueryKey(runtime);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRuntimeStatus>>> = ({ signal }) => getRuntimeStatus(runtime, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(runtime), ...queryOptions}}

export type GetRuntimeStatusQueryResult = NonNullable<Awaited<ReturnType<typeof getRuntimeStatus>>>
export type GetRuntimeStatusQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns the runtime status.
 */
export const useGetRuntimeStatus = <TData = Awaited<ReturnType<typeof getRuntimeStatus>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 runtime: Runtime, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeStatus>>, TError, TData>, request?: SecondParameter<typeof getRuntimeStatusMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRuntimeStatusQueryOptions(runtime,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a list of ROFL apps on the runtime.
 */
export const getRuntimeRoflApps = (
    runtime: Runtime,
    params?: GetRuntimeRoflAppsParams,
 options?: SecondParameter<typeof getRuntimeRoflAppsMutator>,signal?: AbortSignal
) => {
      return getRuntimeRoflAppsMutator<RoflAppList>(
      {url: `/${runtime}/rofl_apps`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetRuntimeRoflAppsQueryKey = (runtime: Runtime,
    params?: GetRuntimeRoflAppsParams,) => [`/${runtime}/rofl_apps`, ...(params ? [params]: [])] as const;
  

    
export const getGetRuntimeRoflAppsQueryOptions = <TData = Awaited<ReturnType<typeof getRuntimeRoflApps>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(runtime: Runtime,
    params?: GetRuntimeRoflAppsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflApps>>, TError, TData>, request?: SecondParameter<typeof getRuntimeRoflAppsMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflApps>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRuntimeRoflAppsQueryKey(runtime,params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRuntimeRoflApps>>> = ({ signal }) => getRuntimeRoflApps(runtime,params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(runtime), ...queryOptions}}

export type GetRuntimeRoflAppsQueryResult = NonNullable<Awaited<ReturnType<typeof getRuntimeRoflApps>>>
export type GetRuntimeRoflAppsQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a list of ROFL apps on the runtime.
 */
export const useGetRuntimeRoflApps = <TData = Awaited<ReturnType<typeof getRuntimeRoflApps>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 runtime: Runtime,
    params?: GetRuntimeRoflAppsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflApps>>, TError, TData>, request?: SecondParameter<typeof getRuntimeRoflAppsMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRuntimeRoflAppsQueryOptions(runtime,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a specific ROFL app.
 */
export const getRuntimeRoflAppsId = (
    runtime: Runtime,
    id: string,
 options?: SecondParameter<typeof getRuntimeRoflAppsIdMutator>,signal?: AbortSignal
) => {
      return getRuntimeRoflAppsIdMutator<RoflApp>(
      {url: `/${runtime}/rofl_apps/${id}`, method: 'get', signal
    },
      options);
    }
  

export const getGetRuntimeRoflAppsIdQueryKey = (runtime: Runtime,
    id: string,) => [`/${runtime}/rofl_apps/${id}`] as const;
  

    
export const getGetRuntimeRoflAppsIdQueryOptions = <TData = Awaited<ReturnType<typeof getRuntimeRoflAppsId>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(runtime: Runtime,
    id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflAppsId>>, TError, TData>, request?: SecondParameter<typeof getRuntimeRoflAppsIdMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflAppsId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRuntimeRoflAppsIdQueryKey(runtime,id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRuntimeRoflAppsId>>> = ({ signal }) => getRuntimeRoflAppsId(runtime,id, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(runtime && id), ...queryOptions}}

export type GetRuntimeRoflAppsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getRuntimeRoflAppsId>>>
export type GetRuntimeRoflAppsIdQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a specific ROFL app.
 */
export const useGetRuntimeRoflAppsId = <TData = Awaited<ReturnType<typeof getRuntimeRoflAppsId>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 runtime: Runtime,
    id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflAppsId>>, TError, TData>, request?: SecondParameter<typeof getRuntimeRoflAppsIdMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRuntimeRoflAppsIdQueryOptions(runtime,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a list of "managing" transactions of the ROFL app.
This does not return transaction submitted by ROFL app instances, for that see
the `/rofl_apps/{id}/instance_transactions` endpoint.

 */
export const getRuntimeRoflAppsIdTransactions = (
    runtime: Runtime,
    id: string,
    params?: GetRuntimeRoflAppsIdTransactionsParams,
 options?: SecondParameter<typeof getRuntimeRoflAppsIdTransactionsMutator>,signal?: AbortSignal
) => {
      return getRuntimeRoflAppsIdTransactionsMutator<RuntimeTransactionList>(
      {url: `/${runtime}/rofl_apps/${id}/transactions`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetRuntimeRoflAppsIdTransactionsQueryKey = (runtime: Runtime,
    id: string,
    params?: GetRuntimeRoflAppsIdTransactionsParams,) => [`/${runtime}/rofl_apps/${id}/transactions`, ...(params ? [params]: [])] as const;
  

    
export const getGetRuntimeRoflAppsIdTransactionsQueryOptions = <TData = Awaited<ReturnType<typeof getRuntimeRoflAppsIdTransactions>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(runtime: Runtime,
    id: string,
    params?: GetRuntimeRoflAppsIdTransactionsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflAppsIdTransactions>>, TError, TData>, request?: SecondParameter<typeof getRuntimeRoflAppsIdTransactionsMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflAppsIdTransactions>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRuntimeRoflAppsIdTransactionsQueryKey(runtime,id,params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRuntimeRoflAppsIdTransactions>>> = ({ signal }) => getRuntimeRoflAppsIdTransactions(runtime,id,params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(runtime && id), ...queryOptions}}

export type GetRuntimeRoflAppsIdTransactionsQueryResult = NonNullable<Awaited<ReturnType<typeof getRuntimeRoflAppsIdTransactions>>>
export type GetRuntimeRoflAppsIdTransactionsQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a list of "managing" transactions of the ROFL app.
This does not return transaction submitted by ROFL app instances, for that see
the `/rofl_apps/{id}/instance_transactions` endpoint.

 */
export const useGetRuntimeRoflAppsIdTransactions = <TData = Awaited<ReturnType<typeof getRuntimeRoflAppsIdTransactions>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 runtime: Runtime,
    id: string,
    params?: GetRuntimeRoflAppsIdTransactionsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflAppsIdTransactions>>, TError, TData>, request?: SecondParameter<typeof getRuntimeRoflAppsIdTransactionsMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRuntimeRoflAppsIdTransactionsQueryOptions(runtime,id,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a list of transactions submitted by instances of the ROFL app.
 */
export const getRuntimeRoflAppsIdInstanceTransactions = (
    runtime: Runtime,
    id: string,
    params?: GetRuntimeRoflAppsIdInstanceTransactionsParams,
 options?: SecondParameter<typeof getRuntimeRoflAppsIdInstanceTransactionsMutator>,signal?: AbortSignal
) => {
      return getRuntimeRoflAppsIdInstanceTransactionsMutator<RuntimeTransactionList>(
      {url: `/${runtime}/rofl_apps/${id}/instance_transactions`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetRuntimeRoflAppsIdInstanceTransactionsQueryKey = (runtime: Runtime,
    id: string,
    params?: GetRuntimeRoflAppsIdInstanceTransactionsParams,) => [`/${runtime}/rofl_apps/${id}/instance_transactions`, ...(params ? [params]: [])] as const;
  

    
export const getGetRuntimeRoflAppsIdInstanceTransactionsQueryOptions = <TData = Awaited<ReturnType<typeof getRuntimeRoflAppsIdInstanceTransactions>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(runtime: Runtime,
    id: string,
    params?: GetRuntimeRoflAppsIdInstanceTransactionsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflAppsIdInstanceTransactions>>, TError, TData>, request?: SecondParameter<typeof getRuntimeRoflAppsIdInstanceTransactionsMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflAppsIdInstanceTransactions>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRuntimeRoflAppsIdInstanceTransactionsQueryKey(runtime,id,params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRuntimeRoflAppsIdInstanceTransactions>>> = ({ signal }) => getRuntimeRoflAppsIdInstanceTransactions(runtime,id,params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(runtime && id), ...queryOptions}}

export type GetRuntimeRoflAppsIdInstanceTransactionsQueryResult = NonNullable<Awaited<ReturnType<typeof getRuntimeRoflAppsIdInstanceTransactions>>>
export type GetRuntimeRoflAppsIdInstanceTransactionsQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a list of transactions submitted by instances of the ROFL app.
 */
export const useGetRuntimeRoflAppsIdInstanceTransactions = <TData = Awaited<ReturnType<typeof getRuntimeRoflAppsIdInstanceTransactions>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 runtime: Runtime,
    id: string,
    params?: GetRuntimeRoflAppsIdInstanceTransactionsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflAppsIdInstanceTransactions>>, TError, TData>, request?: SecondParameter<typeof getRuntimeRoflAppsIdInstanceTransactionsMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRuntimeRoflAppsIdInstanceTransactionsQueryOptions(runtime,id,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a list of instances of the given ROFL app.
 */
export const getRuntimeRoflAppsIdInstances = (
    runtime: Runtime,
    id: string,
    params?: GetRuntimeRoflAppsIdInstancesParams,
 options?: SecondParameter<typeof getRuntimeRoflAppsIdInstancesMutator>,signal?: AbortSignal
) => {
      return getRuntimeRoflAppsIdInstancesMutator<RoflAppInstanceList>(
      {url: `/${runtime}/rofl_apps/${id}/instances`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetRuntimeRoflAppsIdInstancesQueryKey = (runtime: Runtime,
    id: string,
    params?: GetRuntimeRoflAppsIdInstancesParams,) => [`/${runtime}/rofl_apps/${id}/instances`, ...(params ? [params]: [])] as const;
  

    
export const getGetRuntimeRoflAppsIdInstancesQueryOptions = <TData = Awaited<ReturnType<typeof getRuntimeRoflAppsIdInstances>>, TError = unknown>(runtime: Runtime,
    id: string,
    params?: GetRuntimeRoflAppsIdInstancesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflAppsIdInstances>>, TError, TData>, request?: SecondParameter<typeof getRuntimeRoflAppsIdInstancesMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflAppsIdInstances>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRuntimeRoflAppsIdInstancesQueryKey(runtime,id,params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRuntimeRoflAppsIdInstances>>> = ({ signal }) => getRuntimeRoflAppsIdInstances(runtime,id,params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(runtime && id), ...queryOptions}}

export type GetRuntimeRoflAppsIdInstancesQueryResult = NonNullable<Awaited<ReturnType<typeof getRuntimeRoflAppsIdInstances>>>
export type GetRuntimeRoflAppsIdInstancesQueryError = unknown

/**
 * @summary Returns a list of instances of the given ROFL app.
 */
export const useGetRuntimeRoflAppsIdInstances = <TData = Awaited<ReturnType<typeof getRuntimeRoflAppsIdInstances>>, TError = unknown>(
 runtime: Runtime,
    id: string,
    params?: GetRuntimeRoflAppsIdInstancesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflAppsIdInstances>>, TError, TData>, request?: SecondParameter<typeof getRuntimeRoflAppsIdInstancesMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRuntimeRoflAppsIdInstancesQueryOptions(runtime,id,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a specific ROFL instance.
 */
export const getRuntimeRoflAppsIdInstancesRak = (
    runtime: Runtime,
    id: string,
    rak: string,
 options?: SecondParameter<typeof getRuntimeRoflAppsIdInstancesRakMutator>,signal?: AbortSignal
) => {
      return getRuntimeRoflAppsIdInstancesRakMutator<RoflInstance>(
      {url: `/${runtime}/rofl_apps/${id}/instances/${rak}`, method: 'get', signal
    },
      options);
    }
  

export const getGetRuntimeRoflAppsIdInstancesRakQueryKey = (runtime: Runtime,
    id: string,
    rak: string,) => [`/${runtime}/rofl_apps/${id}/instances/${rak}`] as const;
  

    
export const getGetRuntimeRoflAppsIdInstancesRakQueryOptions = <TData = Awaited<ReturnType<typeof getRuntimeRoflAppsIdInstancesRak>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(runtime: Runtime,
    id: string,
    rak: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflAppsIdInstancesRak>>, TError, TData>, request?: SecondParameter<typeof getRuntimeRoflAppsIdInstancesRakMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflAppsIdInstancesRak>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRuntimeRoflAppsIdInstancesRakQueryKey(runtime,id,rak);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRuntimeRoflAppsIdInstancesRak>>> = ({ signal }) => getRuntimeRoflAppsIdInstancesRak(runtime,id,rak, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(runtime && id && rak), ...queryOptions}}

export type GetRuntimeRoflAppsIdInstancesRakQueryResult = NonNullable<Awaited<ReturnType<typeof getRuntimeRoflAppsIdInstancesRak>>>
export type GetRuntimeRoflAppsIdInstancesRakQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a specific ROFL instance.
 */
export const useGetRuntimeRoflAppsIdInstancesRak = <TData = Awaited<ReturnType<typeof getRuntimeRoflAppsIdInstancesRak>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 runtime: Runtime,
    id: string,
    rak: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflAppsIdInstancesRak>>, TError, TData>, request?: SecondParameter<typeof getRuntimeRoflAppsIdInstancesRakMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRuntimeRoflAppsIdInstancesRakQueryOptions(runtime,id,rak,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a list of transactions submitted by the given ROFL instance.
 */
export const getRuntimeRoflAppsIdInstancesRakTransactions = (
    runtime: Runtime,
    id: string,
    rak: string,
    params?: GetRuntimeRoflAppsIdInstancesRakTransactionsParams,
 options?: SecondParameter<typeof getRuntimeRoflAppsIdInstancesRakTransactionsMutator>,signal?: AbortSignal
) => {
      return getRuntimeRoflAppsIdInstancesRakTransactionsMutator<RuntimeTransactionList>(
      {url: `/${runtime}/rofl_apps/${id}/instances/${rak}/transactions`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetRuntimeRoflAppsIdInstancesRakTransactionsQueryKey = (runtime: Runtime,
    id: string,
    rak: string,
    params?: GetRuntimeRoflAppsIdInstancesRakTransactionsParams,) => [`/${runtime}/rofl_apps/${id}/instances/${rak}/transactions`, ...(params ? [params]: [])] as const;
  

    
export const getGetRuntimeRoflAppsIdInstancesRakTransactionsQueryOptions = <TData = Awaited<ReturnType<typeof getRuntimeRoflAppsIdInstancesRakTransactions>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(runtime: Runtime,
    id: string,
    rak: string,
    params?: GetRuntimeRoflAppsIdInstancesRakTransactionsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflAppsIdInstancesRakTransactions>>, TError, TData>, request?: SecondParameter<typeof getRuntimeRoflAppsIdInstancesRakTransactionsMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflAppsIdInstancesRakTransactions>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRuntimeRoflAppsIdInstancesRakTransactionsQueryKey(runtime,id,rak,params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRuntimeRoflAppsIdInstancesRakTransactions>>> = ({ signal }) => getRuntimeRoflAppsIdInstancesRakTransactions(runtime,id,rak,params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(runtime && id && rak), ...queryOptions}}

export type GetRuntimeRoflAppsIdInstancesRakTransactionsQueryResult = NonNullable<Awaited<ReturnType<typeof getRuntimeRoflAppsIdInstancesRakTransactions>>>
export type GetRuntimeRoflAppsIdInstancesRakTransactionsQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a list of transactions submitted by the given ROFL instance.
 */
export const useGetRuntimeRoflAppsIdInstancesRakTransactions = <TData = Awaited<ReturnType<typeof getRuntimeRoflAppsIdInstancesRakTransactions>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 runtime: Runtime,
    id: string,
    rak: string,
    params?: GetRuntimeRoflAppsIdInstancesRakTransactionsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflAppsIdInstancesRakTransactions>>, TError, TData>, request?: SecondParameter<typeof getRuntimeRoflAppsIdInstancesRakTransactionsMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRuntimeRoflAppsIdInstancesRakTransactionsQueryOptions(runtime,id,rak,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a list of ROFL market providers.
 */
export const getRuntimeRoflmarketProviders = (
    runtime: Runtime,
    params?: GetRuntimeRoflmarketProvidersParams,
 options?: SecondParameter<typeof getRuntimeRoflmarketProvidersMutator>,signal?: AbortSignal
) => {
      return getRuntimeRoflmarketProvidersMutator<RoflMarketProviderList>(
      {url: `/${runtime}/roflmarket_providers`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetRuntimeRoflmarketProvidersQueryKey = (runtime: Runtime,
    params?: GetRuntimeRoflmarketProvidersParams,) => [`/${runtime}/roflmarket_providers`, ...(params ? [params]: [])] as const;
  

    
export const getGetRuntimeRoflmarketProvidersQueryOptions = <TData = Awaited<ReturnType<typeof getRuntimeRoflmarketProviders>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(runtime: Runtime,
    params?: GetRuntimeRoflmarketProvidersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflmarketProviders>>, TError, TData>, request?: SecondParameter<typeof getRuntimeRoflmarketProvidersMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflmarketProviders>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRuntimeRoflmarketProvidersQueryKey(runtime,params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRuntimeRoflmarketProviders>>> = ({ signal }) => getRuntimeRoflmarketProviders(runtime,params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(runtime), ...queryOptions}}

export type GetRuntimeRoflmarketProvidersQueryResult = NonNullable<Awaited<ReturnType<typeof getRuntimeRoflmarketProviders>>>
export type GetRuntimeRoflmarketProvidersQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a list of ROFL market providers.
 */
export const useGetRuntimeRoflmarketProviders = <TData = Awaited<ReturnType<typeof getRuntimeRoflmarketProviders>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 runtime: Runtime,
    params?: GetRuntimeRoflmarketProvidersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflmarketProviders>>, TError, TData>, request?: SecondParameter<typeof getRuntimeRoflmarketProvidersMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRuntimeRoflmarketProvidersQueryOptions(runtime,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a specific ROFL market provider.
 */
export const getRuntimeRoflmarketProvidersAddress = (
    runtime: Runtime,
    address: StakingAddress,
 options?: SecondParameter<typeof getRuntimeRoflmarketProvidersAddressMutator>,signal?: AbortSignal
) => {
      return getRuntimeRoflmarketProvidersAddressMutator<RoflMarketProvider>(
      {url: `/${runtime}/roflmarket_providers/${address}`, method: 'get', signal
    },
      options);
    }
  

export const getGetRuntimeRoflmarketProvidersAddressQueryKey = (runtime: Runtime,
    address: StakingAddress,) => [`/${runtime}/roflmarket_providers/${address}`] as const;
  

    
export const getGetRuntimeRoflmarketProvidersAddressQueryOptions = <TData = Awaited<ReturnType<typeof getRuntimeRoflmarketProvidersAddress>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(runtime: Runtime,
    address: StakingAddress, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflmarketProvidersAddress>>, TError, TData>, request?: SecondParameter<typeof getRuntimeRoflmarketProvidersAddressMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflmarketProvidersAddress>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRuntimeRoflmarketProvidersAddressQueryKey(runtime,address);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRuntimeRoflmarketProvidersAddress>>> = ({ signal }) => getRuntimeRoflmarketProvidersAddress(runtime,address, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(runtime && address), ...queryOptions}}

export type GetRuntimeRoflmarketProvidersAddressQueryResult = NonNullable<Awaited<ReturnType<typeof getRuntimeRoflmarketProvidersAddress>>>
export type GetRuntimeRoflmarketProvidersAddressQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a specific ROFL market provider.
 */
export const useGetRuntimeRoflmarketProvidersAddress = <TData = Awaited<ReturnType<typeof getRuntimeRoflmarketProvidersAddress>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 runtime: Runtime,
    address: StakingAddress, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflmarketProvidersAddress>>, TError, TData>, request?: SecondParameter<typeof getRuntimeRoflmarketProvidersAddressMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRuntimeRoflmarketProvidersAddressQueryOptions(runtime,address,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a list of ROFL market offers for a specific provider.
 */
export const getRuntimeRoflmarketProvidersAddressOffers = (
    runtime: Runtime,
    address: StakingAddress,
    params?: GetRuntimeRoflmarketProvidersAddressOffersParams,
 options?: SecondParameter<typeof getRuntimeRoflmarketProvidersAddressOffersMutator>,signal?: AbortSignal
) => {
      return getRuntimeRoflmarketProvidersAddressOffersMutator<RoflMarketOfferList>(
      {url: `/${runtime}/roflmarket_providers/${address}/offers`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetRuntimeRoflmarketProvidersAddressOffersQueryKey = (runtime: Runtime,
    address: StakingAddress,
    params?: GetRuntimeRoflmarketProvidersAddressOffersParams,) => [`/${runtime}/roflmarket_providers/${address}/offers`, ...(params ? [params]: [])] as const;
  

    
export const getGetRuntimeRoflmarketProvidersAddressOffersQueryOptions = <TData = Awaited<ReturnType<typeof getRuntimeRoflmarketProvidersAddressOffers>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(runtime: Runtime,
    address: StakingAddress,
    params?: GetRuntimeRoflmarketProvidersAddressOffersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflmarketProvidersAddressOffers>>, TError, TData>, request?: SecondParameter<typeof getRuntimeRoflmarketProvidersAddressOffersMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflmarketProvidersAddressOffers>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRuntimeRoflmarketProvidersAddressOffersQueryKey(runtime,address,params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRuntimeRoflmarketProvidersAddressOffers>>> = ({ signal }) => getRuntimeRoflmarketProvidersAddressOffers(runtime,address,params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(runtime && address), ...queryOptions}}

export type GetRuntimeRoflmarketProvidersAddressOffersQueryResult = NonNullable<Awaited<ReturnType<typeof getRuntimeRoflmarketProvidersAddressOffers>>>
export type GetRuntimeRoflmarketProvidersAddressOffersQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a list of ROFL market offers for a specific provider.
 */
export const useGetRuntimeRoflmarketProvidersAddressOffers = <TData = Awaited<ReturnType<typeof getRuntimeRoflmarketProvidersAddressOffers>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 runtime: Runtime,
    address: StakingAddress,
    params?: GetRuntimeRoflmarketProvidersAddressOffersParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflmarketProvidersAddressOffers>>, TError, TData>, request?: SecondParameter<typeof getRuntimeRoflmarketProvidersAddressOffersMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRuntimeRoflmarketProvidersAddressOffersQueryOptions(runtime,address,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a specific ROFL market offer.
 */
export const getRuntimeRoflmarketProvidersAddressOffersId = (
    runtime: Runtime,
    address: StakingAddress,
    id: string,
 options?: SecondParameter<typeof getRuntimeRoflmarketProvidersAddressOffersIdMutator>,signal?: AbortSignal
) => {
      return getRuntimeRoflmarketProvidersAddressOffersIdMutator<RoflMarketOffer>(
      {url: `/${runtime}/roflmarket_providers/${address}/offers/${id}`, method: 'get', signal
    },
      options);
    }
  

export const getGetRuntimeRoflmarketProvidersAddressOffersIdQueryKey = (runtime: Runtime,
    address: StakingAddress,
    id: string,) => [`/${runtime}/roflmarket_providers/${address}/offers/${id}`] as const;
  

    
export const getGetRuntimeRoflmarketProvidersAddressOffersIdQueryOptions = <TData = Awaited<ReturnType<typeof getRuntimeRoflmarketProvidersAddressOffersId>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(runtime: Runtime,
    address: StakingAddress,
    id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflmarketProvidersAddressOffersId>>, TError, TData>, request?: SecondParameter<typeof getRuntimeRoflmarketProvidersAddressOffersIdMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflmarketProvidersAddressOffersId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRuntimeRoflmarketProvidersAddressOffersIdQueryKey(runtime,address,id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRuntimeRoflmarketProvidersAddressOffersId>>> = ({ signal }) => getRuntimeRoflmarketProvidersAddressOffersId(runtime,address,id, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(runtime && address && id), ...queryOptions}}

export type GetRuntimeRoflmarketProvidersAddressOffersIdQueryResult = NonNullable<Awaited<ReturnType<typeof getRuntimeRoflmarketProvidersAddressOffersId>>>
export type GetRuntimeRoflmarketProvidersAddressOffersIdQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a specific ROFL market offer.
 */
export const useGetRuntimeRoflmarketProvidersAddressOffersId = <TData = Awaited<ReturnType<typeof getRuntimeRoflmarketProvidersAddressOffersId>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 runtime: Runtime,
    address: StakingAddress,
    id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflmarketProvidersAddressOffersId>>, TError, TData>, request?: SecondParameter<typeof getRuntimeRoflmarketProvidersAddressOffersIdMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRuntimeRoflmarketProvidersAddressOffersIdQueryOptions(runtime,address,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a specific ROFL market instance.
 */
export const getRuntimeRoflmarketProvidersAddressInstancesId = (
    runtime: Runtime,
    address: StakingAddress,
    id: string,
 options?: SecondParameter<typeof getRuntimeRoflmarketProvidersAddressInstancesIdMutator>,signal?: AbortSignal
) => {
      return getRuntimeRoflmarketProvidersAddressInstancesIdMutator<RoflMarketInstance>(
      {url: `/${runtime}/roflmarket_providers/${address}/instances/${id}`, method: 'get', signal
    },
      options);
    }
  

export const getGetRuntimeRoflmarketProvidersAddressInstancesIdQueryKey = (runtime: Runtime,
    address: StakingAddress,
    id: string,) => [`/${runtime}/roflmarket_providers/${address}/instances/${id}`] as const;
  

    
export const getGetRuntimeRoflmarketProvidersAddressInstancesIdQueryOptions = <TData = Awaited<ReturnType<typeof getRuntimeRoflmarketProvidersAddressInstancesId>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(runtime: Runtime,
    address: StakingAddress,
    id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflmarketProvidersAddressInstancesId>>, TError, TData>, request?: SecondParameter<typeof getRuntimeRoflmarketProvidersAddressInstancesIdMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflmarketProvidersAddressInstancesId>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRuntimeRoflmarketProvidersAddressInstancesIdQueryKey(runtime,address,id);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRuntimeRoflmarketProvidersAddressInstancesId>>> = ({ signal }) => getRuntimeRoflmarketProvidersAddressInstancesId(runtime,address,id, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(runtime && address && id), ...queryOptions}}

export type GetRuntimeRoflmarketProvidersAddressInstancesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getRuntimeRoflmarketProvidersAddressInstancesId>>>
export type GetRuntimeRoflmarketProvidersAddressInstancesIdQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a specific ROFL market instance.
 */
export const useGetRuntimeRoflmarketProvidersAddressInstancesId = <TData = Awaited<ReturnType<typeof getRuntimeRoflmarketProvidersAddressInstancesId>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 runtime: Runtime,
    address: StakingAddress,
    id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflmarketProvidersAddressInstancesId>>, TError, TData>, request?: SecondParameter<typeof getRuntimeRoflmarketProvidersAddressInstancesIdMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRuntimeRoflmarketProvidersAddressInstancesIdQueryOptions(runtime,address,id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a list of ROFL market instances.
 */
export const getRuntimeRoflmarketInstances = (
    runtime: Runtime,
    params?: GetRuntimeRoflmarketInstancesParams,
 options?: SecondParameter<typeof getRuntimeRoflmarketInstancesMutator>,signal?: AbortSignal
) => {
      return getRuntimeRoflmarketInstancesMutator<RoflMarketInstanceList>(
      {url: `/${runtime}/roflmarket_instances`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetRuntimeRoflmarketInstancesQueryKey = (runtime: Runtime,
    params?: GetRuntimeRoflmarketInstancesParams,) => [`/${runtime}/roflmarket_instances`, ...(params ? [params]: [])] as const;
  

    
export const getGetRuntimeRoflmarketInstancesQueryOptions = <TData = Awaited<ReturnType<typeof getRuntimeRoflmarketInstances>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(runtime: Runtime,
    params?: GetRuntimeRoflmarketInstancesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflmarketInstances>>, TError, TData>, request?: SecondParameter<typeof getRuntimeRoflmarketInstancesMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflmarketInstances>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRuntimeRoflmarketInstancesQueryKey(runtime,params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRuntimeRoflmarketInstances>>> = ({ signal }) => getRuntimeRoflmarketInstances(runtime,params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(runtime), ...queryOptions}}

export type GetRuntimeRoflmarketInstancesQueryResult = NonNullable<Awaited<ReturnType<typeof getRuntimeRoflmarketInstances>>>
export type GetRuntimeRoflmarketInstancesQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a list of ROFL market instances.
 */
export const useGetRuntimeRoflmarketInstances = <TData = Awaited<ReturnType<typeof getRuntimeRoflmarketInstances>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 runtime: Runtime,
    params?: GetRuntimeRoflmarketInstancesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getRuntimeRoflmarketInstances>>, TError, TData>, request?: SecondParameter<typeof getRuntimeRoflmarketInstancesMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRuntimeRoflmarketInstancesQueryOptions(runtime,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a timeline of the transaction volume at the chosen granularity,
for either consensus or one of the paratimes.

 */
export const getLayerStatsTxVolume = (
    layer: Layer,
    params?: GetLayerStatsTxVolumeParams,
 options?: SecondParameter<typeof getLayerStatsTxVolumeMutator>,signal?: AbortSignal
) => {
      return getLayerStatsTxVolumeMutator<TxVolumeList>(
      {url: `/${layer}/stats/tx_volume`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetLayerStatsTxVolumeQueryKey = (layer: Layer,
    params?: GetLayerStatsTxVolumeParams,) => [`/${layer}/stats/tx_volume`, ...(params ? [params]: [])] as const;
  

    
export const getGetLayerStatsTxVolumeQueryOptions = <TData = Awaited<ReturnType<typeof getLayerStatsTxVolume>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(layer: Layer,
    params?: GetLayerStatsTxVolumeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLayerStatsTxVolume>>, TError, TData>, request?: SecondParameter<typeof getLayerStatsTxVolumeMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getLayerStatsTxVolume>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLayerStatsTxVolumeQueryKey(layer,params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLayerStatsTxVolume>>> = ({ signal }) => getLayerStatsTxVolume(layer,params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(layer), ...queryOptions}}

export type GetLayerStatsTxVolumeQueryResult = NonNullable<Awaited<ReturnType<typeof getLayerStatsTxVolume>>>
export type GetLayerStatsTxVolumeQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a timeline of the transaction volume at the chosen granularity,
for either consensus or one of the paratimes.

 */
export const useGetLayerStatsTxVolume = <TData = Awaited<ReturnType<typeof getLayerStatsTxVolume>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 layer: Layer,
    params?: GetLayerStatsTxVolumeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLayerStatsTxVolume>>, TError, TData>, request?: SecondParameter<typeof getLayerStatsTxVolumeMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetLayerStatsTxVolumeQueryOptions(layer,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


/**
 * @summary Returns a (sliding) timeline of the recorded daily unique active accounts for
either consensus or one of the paratimes.

 */
export const getLayerStatsActiveAccounts = (
    layer: Layer,
    params?: GetLayerStatsActiveAccountsParams,
 options?: SecondParameter<typeof getLayerStatsActiveAccountsMutator>,signal?: AbortSignal
) => {
      return getLayerStatsActiveAccountsMutator<ActiveAccountsList>(
      {url: `/${layer}/stats/active_accounts`, method: 'get',
        params, signal
    },
      options);
    }
  

export const getGetLayerStatsActiveAccountsQueryKey = (layer: Layer,
    params?: GetLayerStatsActiveAccountsParams,) => [`/${layer}/stats/active_accounts`, ...(params ? [params]: [])] as const;
  

    
export const getGetLayerStatsActiveAccountsQueryOptions = <TData = Awaited<ReturnType<typeof getLayerStatsActiveAccounts>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(layer: Layer,
    params?: GetLayerStatsActiveAccountsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLayerStatsActiveAccounts>>, TError, TData>, request?: SecondParameter<typeof getLayerStatsActiveAccountsMutator>}
): UseQueryOptions<Awaited<ReturnType<typeof getLayerStatsActiveAccounts>>, TError, TData> & { queryKey: QueryKey } => {
const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLayerStatsActiveAccountsQueryKey(layer,params);

  
  
    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLayerStatsActiveAccounts>>> = ({ signal }) => getLayerStatsActiveAccounts(layer,params, requestOptions, signal);
    
      
      
   return  { queryKey, queryFn, enabled: !!(layer), ...queryOptions}}

export type GetLayerStatsActiveAccountsQueryResult = NonNullable<Awaited<ReturnType<typeof getLayerStatsActiveAccounts>>>
export type GetLayerStatsActiveAccountsQueryError = HumanReadableErrorResponse | NotFoundErrorResponse

/**
 * @summary Returns a (sliding) timeline of the recorded daily unique active accounts for
either consensus or one of the paratimes.

 */
export const useGetLayerStatsActiveAccounts = <TData = Awaited<ReturnType<typeof getLayerStatsActiveAccounts>>, TError = HumanReadableErrorResponse | NotFoundErrorResponse>(
 layer: Layer,
    params?: GetLayerStatsActiveAccountsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLayerStatsActiveAccounts>>, TError, TData>, request?: SecondParameter<typeof getLayerStatsActiveAccountsMutator>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetLayerStatsActiveAccountsQueryOptions(layer,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}


